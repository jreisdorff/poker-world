{
  "version": 3,
  "sources": ["<stdin>", "../../node_modules/@remix-run/dev/dist/compiler/shims/react.ts", "../../app/entry.server.tsx", "C:\\Users\\jreis\\Desktop\\Sites\\poker-world\\app\\root.tsx", "../../app/session.server.ts", "../../app/models/user.server.ts", "../../app/db.server.ts", "../../app/context.tsx", "C:\\Users\\jreis\\Desktop\\Sites\\poker-world\\app\\routes\\healthcheck.tsx", "C:\\Users\\jreis\\Desktop\\Sites\\poker-world\\app\\routes\\logout.tsx", "C:\\Users\\jreis\\Desktop\\Sites\\poker-world\\app\\routes\\index.tsx", "../../app/components/Card.tsx", "../../app/components/PlayerDisplay.tsx", "../../app/components/Table.tsx", "../../app/utils/poker.ts", "../../app/utils/cards.ts", "../../app/utils/game.ts", "C:\\Users\\jreis\\Desktop\\Sites\\poker-world\\app\\routes\\login.tsx", "../../app/utils.ts", "C:\\Users\\jreis\\Desktop\\Sites\\poker-world\\app\\routes\\notes.tsx", "../../app/models/note.server.ts", "C:\\Users\\jreis\\Desktop\\Sites\\poker-world\\app\\routes\\notes\\$noteId.tsx", "C:\\Users\\jreis\\Desktop\\Sites\\poker-world\\app\\routes\\notes\\index.tsx", "C:\\Users\\jreis\\Desktop\\Sites\\poker-world\\app\\routes\\notes\\new.tsx", "C:\\Users\\jreis\\Desktop\\Sites\\poker-world\\app\\routes\\join.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import { PassThrough } from \"stream\";\nimport { renderToPipeableStream } from \"react-dom/server\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { Response } from \"@remix-run/node\";\nimport type { EntryContext, Headers } from \"@remix-run/node\";\nimport isbot from \"isbot\";\n\nconst ABORT_DELAY = 5000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  const callbackName = isbot(request.headers.get(\"user-agent\"))\n    ? \"onAllReady\"\n    : \"onShellReady\";\n\n  return new Promise((resolve, reject) => {\n    let didError = false;\n\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer context={remixContext} url={request.url} />,\n      {\n        [callbackName]() {\n          let body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body, {\n              status: didError ? 500 : responseStatusCode,\n              headers: responseHeaders,\n            })\n          );\n          pipe(body);\n        },\n        onShellError(err: unknown) {\n          reject(err);\n        },\n        onError(error: unknown) {\n          didError = true;\n          console.error(error);\n        },\n      }\n    );\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "import type { LinksFunction, LoaderArgs, MetaFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useLocation,\n  useMatches,\n} from \"@remix-run/react\";\n\nimport tailwindStylesheetUrl from \"./styles/tailwind.css\";\nimport { getUser } from \"./session.server\";\nimport { useEffect, useState } from \"react\";\nimport { io, Socket } from \"socket.io-client\";\nimport { SocketProvider } from \"./context\";\n\nexport const links: LinksFunction = () => {\n  return [{ rel: \"stylesheet\", href: tailwindStylesheetUrl }];\n};\n\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"Remix Notes\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\nexport async function loader({ request }: LoaderArgs) {\n  return json({\n    user: await getUser(request),\n  });\n}\n\nexport default function App() {\n  const [socket, setSocket] = useState<Socket>();\n\n  useEffect(() => {\n    const socket = io();\n    console.log('set socket');\n    setSocket(socket);\n    return () => {\n      socket.close();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.on(\"confirmation\", (data) => {\n      console.log(data);\n    });\n  }, [socket]);\n\n  return (\n    <html lang=\"en\" className=\"h-full\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body className=\"h-full\">\n        <SocketProvider socket={socket}>\n          <Outlet />\n        </SocketProvider>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n", "import { createCookieSessionStorage, redirect } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\n\nimport type { User } from \"~/models/user.server\";\nimport { getUserById } from \"~/models/user.server\";\n\ninvariant(process.env.SESSION_SECRET, \"SESSION_SECRET must be set\");\n\nexport const sessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: \"__session\",\n    httpOnly: true,\n    path: \"/\",\n    sameSite: \"lax\",\n    secrets: [process.env.SESSION_SECRET],\n    secure: process.env.NODE_ENV === \"production\",\n  },\n});\n\nconst USER_SESSION_KEY = \"userId\";\n\nexport async function getSession(request: Request) {\n  const cookie = request.headers.get(\"Cookie\");\n  return sessionStorage.getSession(cookie);\n}\n\nexport async function getUserId(\n  request: Request\n): Promise<User[\"id\"] | undefined> {\n  const session = await getSession(request);\n  const userId = session.get(USER_SESSION_KEY);\n  return userId;\n}\n\nexport async function getUser(request: Request) {\n  const userId = await getUserId(request);\n  if (userId === undefined) return null;\n\n  const user = await getUserById(userId);\n  if (user) return user;\n\n  throw await logout(request);\n}\n\nexport async function requireUserId(\n  request: Request,\n  redirectTo: string = new URL(request.url).pathname\n) {\n  const userId = await getUserId(request);\n  if (!userId) {\n    const searchParams = new URLSearchParams([[\"redirectTo\", redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return userId;\n}\n\nexport async function requireUser(request: Request) {\n  const userId = await requireUserId(request);\n\n  const user = await getUserById(userId);\n  if (user) return user;\n\n  throw await logout(request);\n}\n\nexport async function createUserSession({\n  request,\n  userId,\n  remember,\n  redirectTo,\n}: {\n  request: Request;\n  userId: string;\n  remember: boolean;\n  redirectTo: string;\n}) {\n  const session = await getSession(request);\n  session.set(USER_SESSION_KEY, userId);\n  return redirect(redirectTo, {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.commitSession(session, {\n        maxAge: remember\n          ? 60 * 60 * 24 * 7 // 7 days\n          : undefined,\n      }),\n    },\n  });\n}\n\nexport async function logout(request: Request) {\n  const session = await getSession(request);\n  return redirect(\"/\", {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.destroySession(session),\n    },\n  });\n}\n", "import type { Password, User } from \"@prisma/client\";\nimport bcrypt from \"bcryptjs\";\n\nimport { prisma } from \"~/db.server\";\n\nexport type { User } from \"@prisma/client\";\n\nexport async function getUserById(id: User[\"id\"]) {\n  return prisma.user.findUnique({ where: { id } });\n}\n\nexport async function getUserByEmail(email: User[\"email\"]) {\n  return prisma.user.findUnique({ where: { email } });\n}\n\nexport async function createUser(email: User[\"email\"], password: string) {\n  const hashedPassword = await bcrypt.hash(password, 10);\n\n  return prisma.user.create({\n    data: {\n      email,\n      password: {\n        create: {\n          hash: hashedPassword,\n        },\n      },\n    },\n  });\n}\n\nexport async function deleteUserByEmail(email: User[\"email\"]) {\n  return prisma.user.delete({ where: { email } });\n}\n\nexport async function verifyLogin(\n  email: User[\"email\"],\n  password: Password[\"hash\"]\n) {\n  const userWithPassword = await prisma.user.findUnique({\n    where: { email },\n    include: {\n      password: true,\n    },\n  });\n\n  if (!userWithPassword || !userWithPassword.password) {\n    return null;\n  }\n\n  const isValid = await bcrypt.compare(\n    password,\n    userWithPassword.password.hash\n  );\n\n  if (!isValid) {\n    return null;\n  }\n\n  const { password: _password, ...userWithoutPassword } = userWithPassword;\n\n  return userWithoutPassword;\n}\n", "import { PrismaClient } from \"@prisma/client\";\n\nlet prisma: PrismaClient;\n\ndeclare global {\n  var __db__: PrismaClient;\n}\n\n// this is needed because in development we don't want to restart\n// the server with every change, but we want to make sure we don't\n// create a new connection to the DB with every change either.\n// in production we'll have a single connection to the DB.\nif (process.env.NODE_ENV === \"production\") {\n  prisma = new PrismaClient();\n} else {\n  if (!global.__db__) {\n    global.__db__ = new PrismaClient();\n  }\n  prisma = global.__db__;\n  prisma.$connect();\n}\n\nexport { prisma };\n", "import type { ReactNode } from \"react\";\r\nimport { createContext, useContext } from \"react\";\r\nimport type { Socket } from \"socket.io-client\";\r\n\r\ntype ProviderProps = {\r\n  socket: Socket | undefined;\r\n  children: ReactNode;\r\n};\r\n\r\nconst context = createContext<Socket | undefined>(undefined);\r\n\r\nexport function useSocket() {\r\n  return useContext(context);\r\n}\r\n\r\nexport function SocketProvider({ socket, children }: ProviderProps) {\r\n  return <context.Provider value={socket}>{children}</context.Provider>;\r\n}", "// learn more: https://fly.io/docs/reference/configuration/#services-http_checks\nimport type { LoaderArgs } from \"@remix-run/node\";\n\nimport { prisma } from \"~/db.server\";\n\nexport async function loader({ request }: LoaderArgs) {\n  const host =\n    request.headers.get(\"X-Forwarded-Host\") ?? request.headers.get(\"host\");\n\n  try {\n    const url = new URL(\"/\", `http://${host}`);\n    // if we can connect to the database and make a simple query\n    // and make a HEAD request to ourselves, then we're good.\n    await Promise.all([\n      prisma.user.count(),\n      fetch(url.toString(), { method: \"HEAD\" }).then((r) => {\n        if (!r.ok) return Promise.reject(r);\n      }),\n    ]);\n    return new Response(\"OK\");\n  } catch (error: unknown) {\n    console.log(\"healthcheck \u274C\", { error });\n    return new Response(\"ERROR\", { status: 500 });\n  }\n}\n", "import type { ActionArgs } from \"@remix-run/node\";\nimport { redirect } from \"@remix-run/node\";\n\nimport { logout } from \"~/session.server\";\n\nexport async function action({ request }: ActionArgs) {\n  return logout(request);\n}\n\nexport async function loader() {\n  return redirect(\"/\");\n}\n", "import Alert from \"@mui/material/Alert\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport { LinksFunction, LoaderFunction, MetaFunction } from \"@remix-run/node\";\nimport { useLocation, useMatches } from \"@remix-run/react\";\nimport { useEffect, useState } from \"react\";\nimport Card from \"~/components/Card\";\nimport PlayerDisplay from \"~/components/PlayerDisplay\";\nimport Table from \"~/components/Table\";\nimport { createCards } from \"~/utils/cards\";\nimport { AdvanceGameProps, advanceHoldEmGame, GameState } from \"~/utils/game\";\nimport { CardProps, CardsCreator, PokerWinner } from \"~/utils/poker\";\nimport cardStyles from \"../styles/cards.css\";\nimport progressStyles from \"../styles/progress.css\";\n\nimport { io } from \"socket.io-client\";\nimport { useSocket } from \"~/context\";\n\nexport const links: LinksFunction = () => {\n  return [\n    { rel: \"stylesheet\", href: cardStyles },\n    { rel: \"stylesheet\", href: progressStyles },\n  ];\n};\n\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"Poker World\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\n// export const loader: LoaderFunction = async ({ request }) => {\n//     return null;\n// }\n\nexport interface Player {\n  name: string;\n  cards: CardProps[];\n  chips: number;\n  folded: boolean;\n  finalCards?: any | any[];\n  [key: string]: string | number | boolean | CardProps[];\n}\n\nconst initialPlayers: Player[] = [\n  {\n    name: \"riceflair\",\n    chips: 1000,\n    cards: [],\n    folded: false,\n  },\n  {\n    name: \"misterbrother\",\n    chips: 1000,\n    cards: [],\n    folded: false,\n  },\n  {\n    name: \"copsucker\",\n    chips: 1000,\n    cards: [],\n    folded: false,\n  },\n];\n\nlet isMount = true;\nexport default function Index() {\n  const [gameState, setGameState] = useState(GameState.Preflop);\n\n  const socket = useSocket();\n\n  const [gameStarted, setGameStarted] = useState(false);\n  const [bet, setBet] = useState(0);\n  const [dealerCards, setDealerCards] = useState<any[]>([]);\n  const [isSnackbarOpen, setIsSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\");\n\n  const [dealtCards, setDealtCards] = useState<any[]>([]);\n\n  const [players, setPlayers] = useState<Player[]>(initialPlayers);\n  const [activePlayerIndex, setActivePlayerIndex] = useState(1); //set to one as that is the player after the dealer\n  const [activePlayer, setActivePlayer] = useState(\n    initialPlayers[activePlayerIndex]\n  );\n\n  const [dealer, setDealer] = useState(initialPlayers[0]);\n  const [littleBlind, setLittleBlind] = useState(initialPlayers[1]);\n  const [bigBlind, setBigBlind] = useState(initialPlayers[2]);\n  const [pots, setPots] = useState<any[]>([0]);\n  const [activeBet, setActiveBet] = useState(0);\n  const [turnNumber, setTurnNumber] = useState(0);\n  const [blinds, setBlinds] = useState([10, 20]);\n  const [winner, setWinner] = useState<{\n    winner: PokerWinner;\n    description: string;\n  } | null>(null);\n  const [gameOver, setGameOver] = useState(false);\n\n  const [hands, setHands] = useState<any[]>([]);\n  const [activePlayerCount, setActivePlayerCount] = useState(3);\n  const [winningCards, setWinningCards] = useState<any[]>([]);\n  const [wonAmount, setWonAmount] = useState(0);\n  const [playerName, setPlayerName] = useState(\"\");\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  const [playerCount, setPlayerCount] = useState(0);\n  const [messageSent, setMessageSent] = useState(false);\n\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [playerNames, setPlayerNames] = useState<any[]>([]);\n\n  let cardsCreator = CardsCreator.getInstance();\n\n  const handleCheckOrCall = () => {\n    let tempPlayers = [...players];\n    let tempActivePlayer = tempPlayers.find(\n      (player) => player.name === activePlayer.name\n    );\n    tempActivePlayer!.chips -= activeBet;\n    let tempPots = [...pots];\n    tempPots[0] += activeBet;\n    setPots(tempPots);\n    setPlayers(tempPlayers);\n    advancePlayer();\n\n    setSnackbarMessage(\n      activeBet\n        ? `${activePlayer.name} called $${activeBet}`\n        : `${activePlayer.name} checked`\n    );\n    setIsSnackbarOpen(true);\n\n    advance();\n  };\n\n  useEffect(() => {\n    if (buttonClicked) {\n      if (!socket) return;\n      socket.emit(\"event\", playerName);\n    }\n  }, [buttonClicked]);\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.on(\"event\", (data) => {\n      setPlayerNames((prevPN) => [...prevPN, data]);\n      let newPlayerCount = 0;\n      setPlayerCount((prevPC) => {\n        newPlayerCount = prevPC + 1;\n        return newPlayerCount;\n      });\n      setButtonClicked(false);\n    });\n  }, [socket]);\n\n  useEffect(() => {\n    if (playerCount === 3) {\n      handleStartGame();\n    }\n  }, [playerCount]);\n\n  const handleJoinGame = () => {\n    setButtonClicked(true);\n  };\n\n  const handleNewGame = () => {\n    setGameState(GameState.Preflop);\n    setGameStarted(true);\n    setGameOver(false);\n    setDealtCards([]);\n    setDealerCards([]);\n    setWinningCards([]);\n    setWinner(null);\n    setWonAmount(0);\n    setActivePlayerCount(3);\n    cardsCreator.clearPassed();\n    setPlayers((prevPlayers: Player[]) =>\n      prevPlayers.map((prev: Player, index) => {\n        let newCards = createCards(52, 2, undefined, index === 0);\n        let newPlayer = {\n          ...initialPlayers[index],\n          name: playerNames[index],\n          chips: prev.chips,\n          cards: newCards,\n          folded: false,\n        };\n        console.log(\"newPlayer\", newPlayer);\n        return newPlayer;\n      })\n    );\n    setDealerCards(createCards(52, 3, undefined, false));\n\n    let nextDealerIndex = hands.length % players.length;\n    let nextLittleBlindIndex = (hands.length + 1) % players.length;\n    let nextBigBlindIndex = (hands.length + 2) % players.length;\n\n    setDealer(initialPlayers[nextDealerIndex]);\n    setLittleBlind(initialPlayers[nextLittleBlindIndex]);\n    setBigBlind(initialPlayers[nextBigBlindIndex]);\n\n    setActivePlayerIndex(nextLittleBlindIndex);\n    setActivePlayer(initialPlayers[nextLittleBlindIndex]);\n\n    setPots([0]);\n  };\n\n  const handleFold = () => {\n    let tempPlayers = [...players];\n    let tempActivePlayer = tempPlayers.find(\n      (player) => player.name === activePlayer.name\n    );\n    tempActivePlayer!.cards = tempActivePlayer!.cards.map((card) => {\n      card.faceUp = false;\n      return card;\n    });\n    tempActivePlayer!.folded = true;\n\n    setPlayers(tempPlayers);\n    advancePlayer();\n\n    setSnackbarMessage(`${activePlayer.name} folded`);\n    setIsSnackbarOpen(true);\n\n    advance();\n  };\n\n  const advance = () => {\n    if (turnNumber + 1 === activePlayerCount) {\n      advanceGame();\n      setActivePlayerCount(players.filter((p) => !p.folded).length);\n      setTurnNumber(0);\n    } else {\n      setTurnNumber(turnNumber + 1);\n    }\n  };\n\n  const handleBet = (amount: number) => {\n    let tempPlayers = [...players];\n    let tempActivePlayer = tempPlayers.find(\n      (player) => player.name === activePlayer.name\n    );\n    tempActivePlayer!.chips -= amount;\n    let tempPots = [...pots];\n    tempPots[0] += amount;\n    setPots(tempPots);\n    setPlayers(tempPlayers);\n    advancePlayer();\n\n    setActiveBet(amount);\n    setSnackbarMessage(`${activePlayer.name} bet $${amount}`);\n    setIsSnackbarOpen(true);\n\n    advance();\n  };\n\n  const handlePlayerTimeout = (player: Player) => {\n    handleFold();\n    setSnackbarMessage(`${activePlayer.name} timed out and auto-folded`);\n    setIsSnackbarOpen(true);\n  };\n\n  const advancePlayer = () => {\n    let tempActivePlayerIndex = activePlayerIndex;\n    let activePlayerIndicies: number[] = [];\n    players.map((p, index) => {\n      if (!p.folded) {\n        activePlayerIndicies.push(index);\n      }\n    });\n\n    let nextActivePlayerIndex = tempActivePlayerIndex;\n\n    for (let i = 0; i < activePlayerIndicies.length; i++) {\n      if (activePlayerIndicies[i] > nextActivePlayerIndex) {\n        nextActivePlayerIndex = activePlayerIndicies[i];\n        break;\n      }\n    }\n\n    if (nextActivePlayerIndex === tempActivePlayerIndex) {\n      nextActivePlayerIndex = activePlayerIndicies[0];\n    }\n\n    setActivePlayerIndex(nextActivePlayerIndex);\n    setActivePlayer(players[nextActivePlayerIndex]);\n  };\n\n  const advanceGame = () => {\n    setActiveBet(0);\n\n    const advanceGameProps: AdvanceGameProps = {\n      gameState,\n      setGameState,\n      dealerCards,\n      setDealerCards,\n      players,\n      setPlayers,\n      hands,\n      setHands,\n      setWinner,\n      setWinningCards,\n      setGameOver,\n      pots,\n      setWonAmount,\n    };\n\n    advanceHoldEmGame(advanceGameProps);\n  };\n\n  const handleClose = () => {\n    setIsSnackbarOpen(false);\n  };\n\n  const advanceHands = () => {\n    handleNewGame();\n  };\n\n  const handleStartGame = () => {\n      setGameState(GameState.Preflop);\n      setGameStarted(true);\n      setGameOver(false);\n      setDealtCards([]);\n      cardsCreator.clearPassed();\n      let tempPlayers = [...players];\n      tempPlayers.forEach((player, index) => {\n        let newCards = createCards(52, 2, dealtCards, index === 0);\n        player.cards = newCards;\n        player.name = playerNames[index];\n        setDealtCards([...dealtCards, ...newCards]);\n      });\n      setDealerCards(createCards(52, 3, dealtCards, false));\n      setPlayers(tempPlayers);\n  };\n\n  return (\n    <>\n      <Snackbar\n        open={isSnackbarOpen}\n        autoHideDuration={3000}\n        onClose={handleClose}\n        key={snackbarMessage}\n      >\n        <Alert\n          className=\"rounded-full\"\n          onClose={handleClose}\n          sx={{ width: \"100%\" }}\n        >\n          {snackbarMessage}\n        </Alert>\n      </Snackbar>\n      <main className=\"relative min-h-screen bg-[rgb(0,90,0)] sm:flex sm:items-center sm:justify-center\">\n        <div className=\"relative sm:pb-16 sm:pt-8\">\n          <div className=\"mx-auto flex h-[100vh] w-[100vw] flex-col\">\n            {!gameStarted && (\n              <>\n                <input\n                  placeholder=\"Enter player name\"\n                  type=\"text\"\n                  value={playerName}\n                  onChange={(e) => setPlayerName(e.target.value)}\n                  className=\"absolute mt-24 self-center rounded bg-black px-4 py-2 text-white\"\n                />\n                <button\n                  className=\"absolute self-center rounded bg-black px-4 py-2 text-white active:bg-white active:text-black\"\n                  onClick={handleJoinGame}\n                >\n                  Join Game\n                </button>\n                <div className=\"absolute mt-48 self-center text-6xl text-black\">\n                  {playerCount}\n                </div>\n                <div className=\"absolute mt-[50%] self-center text-6xl text-black\">\n                  {playerNames.join(\", \")}\n                </div>\n              </>\n            )}\n\n            {gameOver && (\n              <button\n                id=\"next-btn\"\n                className=\"absolute self-center rounded bg-black px-4 py-2 text-white active:bg-white active:text-black\"\n                onClick={() => advanceHands()}\n              >\n                Next Hand\n              </button>\n            )}\n\n            {gameStarted ? (\n              <>\n                <Table />\n                <div className=\"flex flex-col items-center justify-center\">\n                  <div\n                    className={`absolute top-[20%] w-full items-center justify-center self-center text-center text-3xl text-white transition-all duration-[1000ms] ${\n                      !winner ? \"opacity-0\" : \"opacity-100\"\n                    }`}\n                  >\n                    <h1>{winner ? winner.description : null}</h1>\n                  </div>\n                  <div className=\"absolute top-[30%] w-[100vw] items-center justify-center self-center text-center text-xl\">\n                    {`Blinds: ${blinds[0]}/${blinds[1]} \u2022 Pot: ${pots.join(\n                      \", \"\n                    )} \u2022 Hand #${hands.length + 1}`}\n                  </div>\n                  <div className=\"playingCards simpleCards absolute bottom-[48%] flex w-[100vw] flex-row items-center justify-center\">\n                    {dealerCards.map((card, index) => (\n                      <Card\n                        key={`${index}-${card.suit}-${card.rank}`}\n                        suit={card.suit}\n                        rank={card.rank}\n                        faceUp={card.faceUp}\n                        folded={card.faceUp}\n                        winner={\n                          winningCards.length > 0\n                            ? winningCards.filter((w) => {\n                                return (\n                                  w.suit == card.suit.charAt(0) &&\n                                  w.value.toString().replace(\"T\", \"10\") ===\n                                    card.rank\n                                );\n                              }).length > 0\n                            : false\n                        }\n                      />\n                    ))}\n                  </div>\n                </div>\n                <div className=\"flex flex-row gap-1\">\n                  <div className=\"fixed bottom-[47vh] right-[35vw] flex w-[100vw] flex-col items-center justify-center\">\n                    <PlayerDisplay\n                      player={players[1]}\n                      active={activePlayer.name === players[1].name}\n                      onTimeout={() => handlePlayerTimeout(players[1])}\n                      prevPlayer={players[0]}\n                      gameOver={gameOver}\n                    />\n                  </div>\n                  <div className=\"playingCards simpleCards fixed bottom-[45%] right-[25%] flex w-[100vw] rotate-90 flex-row items-center justify-center\">\n                    {players[1].cards.map((card, index) => (\n                      <Card\n                        key={`${index}-${card.suit}-${card.rank}`}\n                        suit={card.suit}\n                        rank={card.rank}\n                        faceUp={card.faceUp}\n                        folded={players[1].folded}\n                        winner={\n                          winningCards.length > 0\n                            ? winningCards.filter((w) => {\n                                return (\n                                  w.suit == card.suit.charAt(0) &&\n                                  w.value.toString().replace(\"T\", \"10\") ===\n                                    card.rank\n                                );\n                              }).length > 0\n                            : false\n                        }\n                      />\n                    ))}\n                  </div>\n                  {dealer.name === players[1].name ? (\n                    <div className=\"fixed bottom-[50%] flex w-[100vw] flex-row pl-8\">\n                      <img\n                        src=\"images/black-dealer-button.png\"\n                        alt=\"dealer\"\n                        className=\"object-cover\"\n                      />\n                    </div>\n                  ) : littleBlind.name === players[1].name ? (\n                    <div className=\"fixed bottom-[50%] flex w-[100vw] flex-row pl-8\">\n                      <img\n                        src=\"images/littleblind.png\"\n                        alt=\"little blind\"\n                        width=\"50px\"\n                        height=\"50px\"\n                        className=\"object-cover\"\n                      />\n                    </div>\n                  ) : bigBlind.name === players[1].name ? (\n                    <div className=\"fixed bottom-[50%] flex w-[100vw] flex-row pl-8\">\n                      <img\n                        src=\"images/bigblind.png\"\n                        alt=\"big blind\"\n                        width=\"50px\"\n                        height=\"50px\"\n                        className=\"object-cover\"\n                      />\n                    </div>\n                  ) : null}\n                </div>\n                <div className=\"flex flex-row gap-1\">\n                  <div className=\"fixed bottom-[47vh] left-[35vw] flex w-[100vw] flex-col items-center justify-center\">\n                    <PlayerDisplay\n                      player={players[2]}\n                      active={activePlayer.name === players[2].name}\n                      onTimeout={() => handlePlayerTimeout(players[2])}\n                      prevPlayer={players[1]}\n                      gameOver={gameOver}\n                    />\n                  </div>\n                  <div className=\"playingCards simpleCards fixed bottom-[45%] left-[25%] flex w-[100vw] -rotate-90 flex-row items-center justify-center\">\n                    {players[2].cards.map((card, index) => (\n                      <Card\n                        key={`${index}-${card.suit}-${card.rank}`}\n                        suit={card.suit}\n                        rank={card.rank}\n                        faceUp={card.faceUp}\n                        folded={players[2].folded}\n                        winner={\n                          winningCards.length > 0\n                            ? winningCards.filter((w) => {\n                                return (\n                                  w.suit == card.suit.charAt(0) &&\n                                  w.value.toString().replace(\"T\", \"10\") ===\n                                    card.rank\n                                );\n                              }).length > 0\n                            : false\n                        }\n                      />\n                    ))}\n                  </div>\n                  {dealer.name === players[2].name ? (\n                    <div className=\"fixed bottom-[50%] flex w-[100vw] flex-row items-end justify-end pr-8\">\n                      <img\n                        src=\"images/black-dealer-button.png\"\n                        alt=\"dealer\"\n                        className=\"object-cover\"\n                      />\n                    </div>\n                  ) : littleBlind.name === players[2].name ? (\n                    <div className=\"fixed bottom-[50%] flex w-[100vw] flex-row items-end justify-end pr-8\">\n                      <img\n                        src=\"images/littleblind.png\"\n                        alt=\"little blind\"\n                        width=\"50px\"\n                        height=\"50px\"\n                        className=\"object-cover\"\n                      />\n                    </div>\n                  ) : bigBlind.name === players[2].name ? (\n                    <div className=\"fixed bottom-[50%] flex w-[100vw] flex-row items-end justify-end pr-8\">\n                      <img\n                        src=\"images/bigblind.png\"\n                        alt=\"big blind\"\n                        width=\"50px\"\n                        height=\"50px\"\n                        className=\"object-cover\"\n                      />\n                    </div>\n                  ) : null}\n                </div>\n                <div className=\"playingCards simpleCards fixed bottom-[20%] flex w-[100vw] flex-row items-center justify-center\">\n                  {players[0].cards.map((card, index) => (\n                    <Card\n                      key={`${index}-${card.suit}-${card.rank}`}\n                      suit={card.suit}\n                      rank={card.rank}\n                      faceUp={card.faceUp}\n                      folded={players[0].folded}\n                      winner={\n                        winningCards.length > 0\n                          ? winningCards.filter((w) => {\n                              return (\n                                w.suit == card.suit.charAt(0) &&\n                                w.value.toString().replace(\"T\", \"10\") ===\n                                  card.rank\n                              );\n                            }).length > 0\n                          : false\n                      }\n                    />\n                  ))}\n                </div>\n                <div className=\"fixed bottom-[7.5%] flex w-[100vw] flex-col items-center justify-center\">\n                  <PlayerDisplay\n                    player={players[0]}\n                    active={activePlayer.name === players[0].name}\n                    onTimeout={() => handlePlayerTimeout(players[0])}\n                    prevPlayer={players[players.length - 1]}\n                    gameOver={gameOver}\n                  />\n                </div>\n                {dealer.name === players[0].name ? (\n                  <div className=\"fixed bottom-[1%] flex w-[100vw] flex-row items-center justify-center\">\n                    <img\n                      src=\"images/black-dealer-button.png\"\n                      alt=\"dealer\"\n                      className=\"object-cover\"\n                    />\n                  </div>\n                ) : littleBlind.name === players[0].name ? (\n                  <div className=\"fixed bottom-[1%] flex w-[100vw] flex-row items-center justify-center\">\n                    <img\n                      src=\"images/littleblind.png\"\n                      alt=\"little blind\"\n                      width=\"50px\"\n                      height=\"50px\"\n                      className=\"object-cover\"\n                    />\n                  </div>\n                ) : bigBlind.name === players[0].name ? (\n                  <div className=\"fixed bottom-[1%] flex w-[100vw] flex-row items-center justify-center\">\n                    <img\n                      src=\"images/bigblind.png\"\n                      alt=\"big blind\"\n                      width=\"50px\"\n                      height=\"50px\"\n                      className=\"object-cover\"\n                    />\n                  </div>\n                ) : null}\n                {!gameOver ? (\n                  <div className=\"fixed bottom-[10%] right-0 flex w-[220px] flex-row items-end justify-end pr-8\">\n                    <div className=\"flex w-[100%] flex-row items-end\">\n                      <div className=\"m-2\">\n                        <input\n                          type=\"range\"\n                          className=\"form-range w-full p-0 focus:shadow-none focus:outline-none focus:ring-0\"\n                          min=\"0\"\n                          max=\"100\"\n                          value={bet}\n                          onChange={(event) => {\n                            setBet(+event.target.value);\n                          }}\n                        />\n                      </div>\n                      <div className=\"flex-1\" />\n                      <button className=\"rounded bg-transparent px-4 py-2 text-white\">\n                        ${bet}\n                      </button>\n                    </div>\n                    <div className=\"fixed bottom-[5%] flex w-[100vw] flex-row items-end justify-end\">\n                      <button\n                        className=\"mr-1 rounded bg-black px-4 py-2 text-white active:bg-white active:text-black\"\n                        onClick={handleFold}\n                      >\n                        Fold\n                      </button>\n                      <button\n                        className=\"mr-1 rounded bg-black px-4 py-2 text-white active:bg-white active:text-black\"\n                        onClick={handleCheckOrCall}\n                      >\n                        {activeBet > 0 ? `Call $${activeBet}` : \"Check\"}\n                      </button>\n                      <button\n                        className=\"rounded bg-black px-4 py-2 text-white active:bg-white active:text-black\"\n                        onClick={() => handleBet(bet)}\n                      >\n                        Bet\n                      </button>\n                    </div>\n                  </div>\n                ) : null}\n              </>\n            ) : null}\n          </div>\n        </div>\n      </main>\n    </>\n  );\n}\n", "import { useState } from \"react\";\r\n\r\ninterface CardProps {\r\n  rank: string;\r\n  suit: string;\r\n  faceUp: boolean;\r\n  folded: boolean;\r\n  winner?: boolean;\r\n}\r\n\r\nexport default function Card(props: CardProps) {\r\n  const { rank, suit, faceUp, folded, winner = false } = props;\r\n\r\n  const getUnicodeSuit = (inputSuit: any) => {\r\n    switch (inputSuit) {\r\n      case \"spades\":\r\n        return \"\\u2660\";\r\n      case \"hearts\":\r\n        return \"\\u2665\";\r\n      case \"diams\":\r\n        return \"\\u2666\";\r\n      case \"clubs\":\r\n        return \"\\u2663\";\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`relative p-0 ${winner ? '-mt-8 transition-all duration-1000' : ''}`}>\r\n      <div className={`card rank-${rank} ${suit} ${winner ? 'winner border-4 border-lime-500' : ''}`}>\r\n        <span className=\"rank\">{rank}</span>\r\n        <span className=\"suit\">{getUnicodeSuit(suit)}</span>\r\n      </div>\r\n      {!faceUp && (\r\n        <div className=\"absolute top-0\">\r\n          <div className={`card back ${folded ? 'folded' : ''}`} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n", "import { useEffect, useState } from \"react\";\r\nimport { Player } from \"~/routes\";\r\n\r\ninterface PlayerDisplayProps {\r\n  player: Player;\r\n  active: boolean;\r\n  onTimeout: () => void;\r\n  prevPlayer: Player;\r\n  gameOver: boolean;\r\n  wonAmount?: number;\r\n}\r\n\r\nexport default function PlayerDisplay(props: PlayerDisplayProps) {\r\n  const { player, active, onTimeout, prevPlayer, gameOver, wonAmount = 0 } = props;\r\n\r\n  const [progressCreated, setProgressCreated] = useState(false);\r\n\r\n  const createProgressbar = (id: string, duration: string, callback: any) => {\r\n    // We select the div that we want to turn into a progressbar\r\n    var progressbar = document.getElementById(id);\r\n    if (progressbar) {\r\n      progressbar!.className = \"progressbar\";\r\n\r\n      // We create the div that changes width to show progress\r\n      var progressbarinner = document.createElement(\"div\");\r\n      progressbarinner.className = \"inner\";\r\n\r\n      // Now we set the animation parameters\r\n      progressbarinner.style.animationDuration = duration;\r\n\r\n      // Eventually couple a callback\r\n      if (typeof callback === \"function\") {\r\n        progressbarinner.addEventListener(\"animationend\", callback);\r\n      }\r\n\r\n      // Append the progressbar to the main progressbardiv\r\n      progressbar?.appendChild(progressbarinner);\r\n\r\n      // When everything is set up we start the animation\r\n      progressbarinner.style.animationPlayState = \"running\";\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!gameOver) {\r\n      createProgressbar(\"progressbar\", \"10s\", function () {\r\n        onTimeout();\r\n      });\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className={`flex flex-col`}>\r\n      <div\r\n        className={`w-[135px] max-w-[100vw] rounded-t-2xl bg-black p-1 text-center text-white ${\r\n          active && !gameOver\r\n            ? \"border-x-4 border-t-4 border-x-lime-500 border-t-lime-500\"\r\n            : null\r\n        }`}\r\n      >\r\n        {`${player.name}`}\r\n      </div>\r\n      <div\r\n        className={`mb-1 w-[135px] max-w-[100vw] rounded-b-2xl bg-white p-1 text-center text-black ${\r\n          active && !gameOver\r\n            ? \"border-x-4 border-b-4 border-x-lime-500 border-b-lime-500\"\r\n            : null\r\n        }`}\r\n      >\r\n        {wonAmount > 0 ? `${player.chips} + ${wonAmount}` : `${player.chips}`}\r\n      </div>\r\n      {active ? (\r\n        <div id=\"progressbar\"></div>\r\n      ) : (\r\n        <div className=\"m-[10px] h-[20px] w-full\"></div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n", "export default function Table() {\r\n    return (\r\n        <div className=\"self-center min-w-full min-h-full flex flex-col items-center justify-center -z-1\">\r\n            <img src=\"images/table.png\" alt=\"table\" className=\"object-cover\" />\r\n        </div>\r\n    );\r\n}", "import { objectEnumValues } from \"@prisma/client/runtime\";\r\nimport * as _ from \"lodash\";\r\nimport { forEach } from \"lodash\";\r\nimport { Player } from \"~/routes\";\r\n\r\n/*\r\nExample implementation used in the Think Functional course\r\ntaken from: https://codepen.io/dlivas/pen/mqJwmX\r\n*/\r\n\r\n//\r\n//  Util Functions\r\n//\r\nconst deepFreeze = (object: any) => {\r\n  if (typeof object !== \"object\") {\r\n    return object;\r\n  }\r\n  Object.freeze(object);\r\n\r\n  Object.values(object).forEach((value) => deepFreeze(value));\r\n\r\n  return object;\r\n};\r\n\r\nconst maxInARow = (weights: any) =>\r\n  _.chain(weights)\r\n    .sortBy()\r\n    .uniq()\r\n    .map((num: number, i: number) => num - i)\r\n    .groupBy()\r\n    .orderBy(\"length\" as any)\r\n    .last()\r\n    .value().length;\r\n\r\n//\r\n// Playing Cards class definition and implementation\r\n// in a functional fashion\r\n//\r\nexport const Ranks = Object.freeze([\r\n  \"2\",\r\n  \"3\",\r\n  \"4\",\r\n  \"5\",\r\n  \"6\",\r\n  \"7\",\r\n  \"8\",\r\n  \"9\",\r\n  \"10\",\r\n  \"J\",\r\n  \"Q\",\r\n  \"K\",\r\n  \"A\",\r\n]);\r\nexport const Suits = Object.freeze([\"hearts\", \"clubs\", \"diams\", \"spades\"]);\r\n\r\nexport interface CardProps {\r\n  rank: string;\r\n  suit: string;\r\n  weight: string;\r\n  faceUp: boolean;\r\n}\r\n\r\nconst Cards: (faceUp: boolean) => CardProps[] | any = (faceUp: boolean) => {\r\n  return Object.entries(Ranks).reduce(\r\n    (cards, [weight, rank]) =>\r\n      [\r\n        ...cards,\r\n        ...Suits.map((suit) => ({ rank, suit, weight, faceUp })),\r\n      ] as any,\r\n    []\r\n  );\r\n};\r\n\r\nconst CardsAndDeck = (currentDeck: any[], n = 0) => {\r\n  const deck =\r\n    currentDeck !== Cards(false)\r\n      ? currentDeck.slice(n, currentDeck.length)\r\n      : currentDeck\r\n          .slice(n, currentDeck.length)\r\n          .sort(() => Math.random() - 0.5);\r\n\r\n  Object.freeze(deck);\r\n  const cards = Object.freeze(deck.slice(n));\r\n\r\n  return {\r\n    cards,\r\n    deck,\r\n  };\r\n};\r\n\r\nexport class RateableCards {\r\n  ranks: any;\r\n  suits: any;\r\n  rankTimes: any;\r\n  suitTimes: any;\r\n  maxInARow: number;\r\n  constructor(cards: { weight: any }[]) {\r\n    this.ranks = _.groupBy(cards, \"rank\");\r\n    this.suits = _.groupBy(cards, \"suit\");\r\n    this.rankTimes = _.groupBy(this.ranks, \"length\");\r\n    this.suitTimes = _.groupBy(this.suits, \"length\");\r\n    this.maxInARow = maxInARow(cards.map(({ weight }) => weight));\r\n  }\r\n\r\n  getOfSameRank(n: number) {\r\n    return this.rankTimes[n] || [];\r\n  }\r\n\r\n  getOfSameSuit(n: string | number) {\r\n    return this.suitTimes[n] || [];\r\n  }\r\n\r\n  hasAce() {\r\n    return !!this.ranks[\"A\"];\r\n  }\r\n\r\n  hasOfSameRank(n: any) {\r\n    return this.getOfSameRank(n).length;\r\n  }\r\n\r\n  hasOfSameSuit(n: any) {\r\n    return this.getOfSameSuit(n).length;\r\n  }\r\n\r\n  hasInARow(n: number) {\r\n    return this.maxInARow >= n;\r\n  }\r\n\r\n  getWorstSingles() {\r\n    return _.chain(this.getOfSameRank(1)).flatten().sortBy(\"weight\").value();\r\n  }\r\n}\r\n\r\n//\r\n// Poker Ratings\r\n//\r\nconst PokerRating = {\r\n  RoyalFlush: (hand: {\r\n    hasInARow: (arg0: number) => any;\r\n    hasOfSameSuit: (arg0: number) => any;\r\n    hasAce: () => any;\r\n  }) => hand.hasInARow(5) && hand.hasOfSameSuit(5) && hand.hasAce(),\r\n  StraightFlush: (hand: {\r\n    hasInARow: (arg0: number) => any;\r\n    hasOfSameSuit: (arg0: number) => any;\r\n  }) => hand.hasInARow(5) && hand.hasOfSameSuit(5),\r\n  FourOfAKind: (hand: { hasOfSameRank: (arg0: number) => any }) =>\r\n    hand.hasOfSameRank(4),\r\n  FullHouse: (hand: { hasOfSameRank: (arg0: number) => any }) =>\r\n    hand.hasOfSameRank(3) && hand.hasOfSameRank(2),\r\n  Flush: (hand: { hasOfSameSuit: (arg0: number) => any }) =>\r\n    hand.hasOfSameSuit(5),\r\n  Straight: (hand: { hasInARow: (arg0: number) => any }) => hand.hasInARow(5),\r\n  ThreeOfAKind: (hand: { hasOfSameRank: (arg0: number) => any }) =>\r\n    hand.hasOfSameRank(3),\r\n  TwoPair: (hand: { hasOfSameRank: (arg0: number) => number }) =>\r\n    hand.hasOfSameRank(2) >= 2,\r\n  OnePair: (hand: { hasOfSameRank: (arg0: number) => any }) =>\r\n    hand.hasOfSameRank(2),\r\n  HighCard: (hand: { hasOfSameRank: (arg0: number) => number }) =>\r\n    hand.hasOfSameRank(1) >= 5,\r\n};\r\n\r\nexport const PokerHandRate = (cards: RateableCards) =>\r\n  (Object.entries(PokerRating) as any).find((item: [any, any]) => {\r\n    const [, is] = item;\r\n    return is(cards);\r\n  })[0];\r\n\r\nexport const CardsCreator = (() => {\r\n  let instance: {\r\n    getCards: (faceUp: boolean, max?: number, n?: number) => any;\r\n    clearPassed: () => void;\r\n  };\r\n\r\n  const init = () => {\r\n    let passed: number[] = [];\r\n\r\n    const getUniqueRandomInt: any = (max: number) => {\r\n      const num = Math.floor(Math.random() * Math.floor(max));\r\n\r\n      if (_.includes(passed, num)) {\r\n        return getUniqueRandomInt(max);\r\n      }\r\n\r\n      passed.push(num);\r\n\r\n      return num;\r\n    };\r\n\r\n    const clearPassed = () => {\r\n      passed = [];\r\n    };\r\n\r\n    const getCards = (faceUp = false, max = 52, n = 5) => {\r\n      return _.times(n, () => Cards(faceUp)[getUniqueRandomInt(max) as number]);\r\n    };\r\n\r\n    return {\r\n      getCards,\r\n      clearPassed,\r\n    };\r\n  };\r\n\r\n  return {\r\n    getInstance: () => {\r\n      if (!instance) instance = init();\r\n\r\n      return instance;\r\n    },\r\n  };\r\n})();\r\n\r\nlet hands = [\r\n  \"4 of a Kind\",\r\n  \"Straight Flush\",\r\n  \"Straight\",\r\n  \"Flush\",\r\n  \"High Card\",\r\n  \"1 Pair\",\r\n  \"2 Pair\",\r\n  \"Royal Flush\",\r\n  \"3 of a Kind\",\r\n  \"Full House\",\r\n];\r\nvar A = 14,\r\n  K = 13,\r\n  Q = 12,\r\n  J = 11,\r\n  suitsObj = { \"\u2660\": 1, \"\u2663\": 2, \"\u2665\": 4, \"\u2666\": 8 };\r\n\r\n//Calculates the Rank of a 5 card Poker hand using bit manipulations.\r\nexport const rankPokerHand = (cs: number[], ss: number[]) => {\r\n  var v,\r\n    i,\r\n    o,\r\n    s =\r\n      (1 << cs[0]) | (1 << cs[1]) | (1 << cs[2]) | (1 << cs[3]) | (1 << cs[4]);\r\n  for (i = -1, v = o = 0; i < 5; i++, o = Math.pow(2, cs[i] * 4)) {\r\n    v += o * (((v / o) & 15) + 1);\r\n  }\r\n  v = (v % 15) - (s / (s & -s) == 31 || s == 0x403c ? 3 : 1);\r\n  let checkForFlush = ss[0] == (ss[1] | ss[2] | ss[3] | ss[4]);\r\n  v -= +checkForFlush * (s == 0x7c00 ? -5 : 1);\r\n  return `${hands[v]} ${s == 0x403c ? \" (Ace low)\" : \"\"}`;\r\n};\r\n\r\nvar Hand = require('pokersolver').Hand;\r\n\r\nexport interface TotalCards {\r\n  dealerCards: any[];\r\n  player: Player;\r\n}\r\n\r\nexport interface PokerWinner {\r\n  players: any[];\r\n  wins: Winner[];\r\n  winnerIndicies: number[];\r\n  hand: string;\r\n}\r\n\r\nexport const determineWinner: (pwdc: any[]) => PokerWinner = (playerWithDealerCards: any[]) => {\r\n  const dealerCards = playerWithDealerCards[0].dealerCards;\r\n\r\n  const dealerCardsArray = dealerCards.map((card: CardProps) => `${card.rank == '10' ? 'T' : card.rank}${card.suit.charAt(0)}`);\r\n\r\n  const handsArray = playerWithDealerCards.map((player: TotalCards) => {\r\n    return [...dealerCardsArray, ...player.player.cards.map((card: CardProps) => `${card.rank == '10' ? 'T' : card.rank}${card.suit.charAt(0)}`)];\r\n  });\r\n\r\n  let solvedHands = handsArray.map((hand: string[]) => Hand.solve(hand));\r\n\r\n  var wins: Winner[] = Hand.winners(solvedHands);\r\n\r\n  let winnerIndicies: number[] = [];\r\n\r\n  solvedHands.filter((item, index) => {\r\n    if (wins.includes(item)) {\r\n      winnerIndicies.push(index);\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\n\r\n  const pokerWinner: PokerWinner = {\r\n    players: playerWithDealerCards.filter((item, index) => winnerIndicies.includes(index)),\r\n    wins,\r\n    winnerIndicies,\r\n    hand: wins[0].descr\r\n  };\r\n\r\n  return pokerWinner;\r\n};\r\n\r\nexport interface Winner {\r\n  cards: any[],\r\n  cardPool: any[],\r\n  descr: string;\r\n  name: string;\r\n  rank: number;\r\n}\r\n\r\nconst sortByBestHand = (players: Player[]) => {\r\n  const finalCardsArray = players.map((player, index) => {\r\n    return { finalCards: player.finalCards, index };\r\n  });\r\n  const sortedPlayers = finalCardsArray.sort((a, b) =>\r\n    byCountFirst(\r\n      players.map((player) => player.finalCards),\r\n      new RateableCards(a.finalCards).suitTimes,\r\n      new RateableCards(b.finalCards).suitTimes\r\n    )\r\n  );\r\n  return sortedPlayers;\r\n};\r\n\r\nconst counts = (cards: any[]) => cards.reduce(count, {});\r\n\r\nconst byCountFirst = (cardsArray: any[], a: number, b: number) => {\r\n  const tempCounts = counts(cardsArray);\r\n  //Counts are in reverse order - bigger is better\r\n  const countDiff = tempCounts[b] - tempCounts[a];\r\n  if (countDiff) return countDiff;\r\n  return b > a ? -1 : b === a ? 0 : 1;\r\n};\r\n\r\nconst count: any = (\r\n  c: { [x: string]: any },\r\n  a: string | number,\r\n  index: any\r\n) => {\r\n  c[a] = (c[a] || 0) + 1;\r\n  return c;\r\n};\r\n", "import { CardProps, CardsCreator } from \"./poker\";\r\n\r\nconst Creator = CardsCreator.getInstance();\r\n\r\nexport const createCards = (max: any, n: any, remaining: CardProps[] | any[] = [], faceUp: boolean) => {\r\n  return [...remaining, ...Creator.getCards(faceUp, max, n)];\r\n};\r\n", "import { Player } from \"~/routes\";\r\nimport { createCards } from \"./cards\";\r\nimport { determineWinner, PokerWinner, TotalCards } from \"./poker\";\r\n\r\nexport enum GameState {\r\n    Preflop,\r\n    Flop,\r\n    Turn,\r\n    River,\r\n    Showdown,\r\n}\r\n\r\nexport interface AdvanceGameProps {\r\n    gameState: GameState;\r\n    setGameState: (gameState: GameState) => void;\r\n    dealerCards: any[];\r\n    setDealerCards: (dealerCards: any[]) => void;\r\n    players: Player[];\r\n    setPlayers: (players: Player[]) => void;\r\n    hands: any[];\r\n    setHands: (hands: any[]) => void;\r\n    setWinner: (winner: any) => void;\r\n    setWinningCards: (winningCards: any[]) => void;\r\n    setGameOver: (gameOver: boolean) => void;\r\n    pots: any[];\r\n    setWonAmount: (amount: number) => void;\r\n};\r\n\r\nexport const advanceHoldEmGame = (props: AdvanceGameProps) => {\r\n  const {\r\n    gameState,\r\n    setGameState,\r\n    dealerCards,\r\n    setDealerCards,\r\n    players,\r\n    setPlayers,\r\n    hands,\r\n    setHands,\r\n    setWinner,\r\n    setWinningCards,\r\n    setGameOver,\r\n    pots,\r\n    setWonAmount,\r\n  } = props;\r\n\r\n  if (gameState === GameState.Preflop) {\r\n    setGameState(GameState.Flop);\r\n    let tempDealerCards = [...dealerCards];\r\n    tempDealerCards.forEach((card) => {\r\n      card.faceUp = true;\r\n    });\r\n    setDealerCards(tempDealerCards);\r\n  } else if (gameState === GameState.Flop) {\r\n    setGameState(GameState.Turn);\r\n    let newCards = createCards(52, 1, undefined, true);\r\n    setDealerCards([...dealerCards, ...newCards]);\r\n  } else if (gameState === GameState.Turn) {\r\n    setGameState(GameState.River);\r\n    let newCards = createCards(52, 1, undefined, true);\r\n    setDealerCards([...dealerCards, ...newCards]);\r\n  } else if (gameState === GameState.River) {\r\n    setGameState(GameState.Showdown);\r\n    let tempDealerCards = [...dealerCards];\r\n    tempDealerCards.forEach((card) => {\r\n      card.faceUp = true;\r\n    });\r\n    let tempPlayers = [...players];\r\n    setDealerCards(tempDealerCards);\r\n    let gameWinner = determineWinner(\r\n      players\r\n        .filter(\r\n          (player: { name: any; folded: any; }) =>\r\n            players.map((pith: { name: any; }) => pith.name).includes(player.name) &&\r\n            !player.folded\r\n        )\r\n        .map((player: any) => {\r\n          return { dealerCards, player } as TotalCards;\r\n        })\r\n    );\r\n\r\n    const winnerDescription = `${\r\n      gameWinner.players.length === 1\r\n        ? (gameWinner.players[0] as { player: Player }).player.name\r\n        : gameWinner.players\r\n            .map((winner: any) => winner.player.name)\r\n            .join(\", \")\r\n            .replace(/, ((?:.(?!, ))+)$/, \", and $1\")\r\n    } ${gameWinner.players.length === 1 ? \"won\" : \"split the pot\"} with ${\r\n      gameWinner.hand\r\n    }`;\r\n    let tempHands = [...hands];\r\n    let winnar = { winner: gameWinner, description: winnerDescription };\r\n    tempHands.push(winnar);\r\n    setHands(tempHands);\r\n    const winnerObj = { winner: gameWinner, description: winnerDescription };\r\n    setWinner(winnerObj);\r\n    let tempWinningCards: any[] = [];\r\n    gameWinner.wins.forEach((w) => {\r\n      w.cards.forEach((card) => {\r\n        if (!tempWinningCards.includes(card)) {\r\n          tempWinningCards.push(card);\r\n        }\r\n      });\r\n    });\r\n\r\n    setWinningCards(tempWinningCards);\r\n    let wonAmount = getWonAmount(winnerObj, pots);\r\n    setWonAmount(wonAmount);\r\n\r\n    tempPlayers\r\n      .filter((p) => !p.folded)\r\n      .forEach((player) => {\r\n        player.cards.forEach((card: { faceUp: boolean }) => {\r\n          card.faceUp = true;\r\n        });\r\n      });\r\n    \r\n    tempPlayers.filter((p, index) => gameWinner.winnerIndicies.includes(index)).forEach((player) => {\r\n        player.chips += wonAmount;\r\n    });\r\n\r\n    setPlayers(tempPlayers);\r\n\r\n    setGameOver(true);\r\n  }\r\n};\r\n\r\nexport const getWonAmount: (winner: { winner: PokerWinner; description: string; }, pots: any[]) => any = (winner: { winner: PokerWinner; description: string; }, pots: any[]) => {\r\n    \r\n    let daMoney = 0;\r\n    let numberOfWinners = winner.winner.players.length;\r\n\r\n    pots.forEach((pot: number) => {\r\n        daMoney += pot;\r\n    });\r\n    \r\n    if (numberOfWinners === 1) {\r\n        return daMoney;\r\n    } else if (numberOfWinners > 1) {\r\n        return Math.floor(daMoney / numberOfWinners);\r\n    }\r\n}\r\n", "import type { ActionArgs, LoaderArgs, MetaFunction } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, Link, useActionData, useSearchParams } from \"@remix-run/react\";\nimport * as React from \"react\";\n\nimport { createUserSession, getUserId } from \"~/session.server\";\nimport { verifyLogin } from \"~/models/user.server\";\nimport { safeRedirect, validateEmail } from \"~/utils\";\n\nexport async function loader({ request }: LoaderArgs) {\n  const userId = await getUserId(request);\n  if (userId) return redirect(\"/\");\n  return json({});\n}\n\nexport async function action({ request }: ActionArgs) {\n  const formData = await request.formData();\n  const email = formData.get(\"email\");\n  const password = formData.get(\"password\");\n  const redirectTo = safeRedirect(formData.get(\"redirectTo\"), \"/notes\");\n  const remember = formData.get(\"remember\");\n\n  if (!validateEmail(email)) {\n    return json(\n      { errors: { email: \"Email is invalid\", password: null } },\n      { status: 400 }\n    );\n  }\n\n  if (typeof password !== \"string\" || password.length === 0) {\n    return json(\n      { errors: { email: null, password: \"Password is required\" } },\n      { status: 400 }\n    );\n  }\n\n  if (password.length < 8) {\n    return json(\n      { errors: { email: null, password: \"Password is too short\" } },\n      { status: 400 }\n    );\n  }\n\n  const user = await verifyLogin(email, password);\n\n  if (!user) {\n    return json(\n      { errors: { email: \"Invalid email or password\", password: null } },\n      { status: 400 }\n    );\n  }\n\n  return createUserSession({\n    request,\n    userId: user.id,\n    remember: remember === \"on\" ? true : false,\n    redirectTo,\n  });\n}\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: \"Login\",\n  };\n};\n\nexport default function LoginPage() {\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get(\"redirectTo\") || \"/notes\";\n  const actionData = useActionData<typeof action>();\n  const emailRef = React.useRef<HTMLInputElement>(null);\n  const passwordRef = React.useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    if (actionData?.errors?.email) {\n      emailRef.current?.focus();\n    } else if (actionData?.errors?.password) {\n      passwordRef.current?.focus();\n    }\n  }, [actionData]);\n\n  return (\n    <div className=\"flex min-h-full flex-col justify-center\">\n      <div className=\"mx-auto w-full max-w-md px-8\">\n        <Form method=\"post\" className=\"space-y-6\">\n          <div>\n            <label\n              htmlFor=\"email\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Email address\n            </label>\n            <div className=\"mt-1\">\n              <input\n                ref={emailRef}\n                id=\"email\"\n                required\n                autoFocus={true}\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                aria-invalid={actionData?.errors?.email ? true : undefined}\n                aria-describedby=\"email-error\"\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n              />\n              {actionData?.errors?.email && (\n                <div className=\"pt-1 text-red-700\" id=\"email-error\">\n                  {actionData.errors.email}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"password\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Password\n            </label>\n            <div className=\"mt-1\">\n              <input\n                id=\"password\"\n                ref={passwordRef}\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"current-password\"\n                aria-invalid={actionData?.errors?.password ? true : undefined}\n                aria-describedby=\"password-error\"\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n              />\n              {actionData?.errors?.password && (\n                <div className=\"pt-1 text-red-700\" id=\"password-error\">\n                  {actionData.errors.password}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\n          <button\n            type=\"submit\"\n            className=\"w-full rounded bg-blue-500  py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n          >\n            Log in\n          </button>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <input\n                id=\"remember\"\n                name=\"remember\"\n                type=\"checkbox\"\n                className=\"h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n              />\n              <label\n                htmlFor=\"remember\"\n                className=\"ml-2 block text-sm text-gray-900\"\n              >\n                Remember me\n              </label>\n            </div>\n            <div className=\"text-center text-sm text-gray-500\">\n              Don't have an account?{\" \"}\n              <Link\n                className=\"text-blue-500 underline\"\n                to={{\n                  pathname: \"/join\",\n                  search: searchParams.toString(),\n                }}\n              >\n                Sign up\n              </Link>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n}\n", "import { useMatches } from \"@remix-run/react\";\nimport { useMemo } from \"react\";\n\nimport type { User } from \"~/models/user.server\";\n\nconst DEFAULT_REDIRECT = \"/\";\n\n/**\n * This should be used any time the redirect path is user-provided\n * (Like the query string on our login/signup pages). This avoids\n * open-redirect vulnerabilities.\n * @param {string} to The redirect destination\n * @param {string} defaultRedirect The redirect to use if the to is unsafe.\n */\nexport function safeRedirect(\n  to: FormDataEntryValue | string | null | undefined,\n  defaultRedirect: string = DEFAULT_REDIRECT\n) {\n  if (!to || typeof to !== \"string\") {\n    return defaultRedirect;\n  }\n\n  if (!to.startsWith(\"/\") || to.startsWith(\"//\")) {\n    return defaultRedirect;\n  }\n\n  return to;\n}\n\n/**\n * This base hook is used in other hooks to quickly search for specific data\n * across all loader data using useMatches.\n * @param {string} id The route id\n * @returns {JSON|undefined} The router data or undefined if not found\n */\nexport function useMatchesData(\n  id: string\n): Record<string, unknown> | undefined {\n  const matchingRoutes = useMatches();\n  const route = useMemo(\n    () => matchingRoutes.find((route) => route.id === id),\n    [matchingRoutes, id]\n  );\n  return route?.data;\n}\n\nfunction isUser(user: any): user is User {\n  return user && typeof user === \"object\" && typeof user.email === \"string\";\n}\n\nexport function useOptionalUser(): User | undefined {\n  const data = useMatchesData(\"root\");\n  if (!data || !isUser(data.user)) {\n    return undefined;\n  }\n  return data.user;\n}\n\nexport function useUser(): User {\n  const maybeUser = useOptionalUser();\n  if (!maybeUser) {\n    throw new Error(\n      \"No user found in root loader, but user is required by useUser. If user is optional, try useOptionalUser instead.\"\n    );\n  }\n  return maybeUser;\n}\n\nexport function validateEmail(email: unknown): email is string {\n  return typeof email === \"string\" && email.length > 3 && email.includes(\"@\");\n}\n", "import type { LoaderArgs } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, Link, NavLink, Outlet, useLoaderData } from \"@remix-run/react\";\n\nimport { requireUserId } from \"~/session.server\";\nimport { useUser } from \"~/utils\";\nimport { getNoteListItems } from \"~/models/note.server\";\n\nexport async function loader({ request }: LoaderArgs) {\n  const userId = await requireUserId(request);\n  const noteListItems = await getNoteListItems({ userId });\n  return json({ noteListItems });\n}\n\nexport default function NotesPage() {\n  const data = useLoaderData<typeof loader>();\n  const user = useUser();\n\n  return (\n    <div className=\"flex h-full min-h-screen flex-col\">\n      <header className=\"flex items-center justify-between bg-slate-800 p-4 text-white\">\n        <h1 className=\"text-3xl font-bold\">\n          <Link to=\".\">Notes</Link>\n        </h1>\n        <p>{user.email}</p>\n        <Form action=\"/logout\" method=\"post\">\n          <button\n            type=\"submit\"\n            className=\"rounded bg-slate-600 py-2 px-4 text-blue-100 hover:bg-blue-500 active:bg-blue-600\"\n          >\n            Logout\n          </button>\n        </Form>\n      </header>\n\n      <main className=\"flex h-full bg-white\">\n        <div className=\"h-full w-80 border-r bg-gray-50\">\n          <Link to=\"new\" className=\"block p-4 text-xl text-blue-500\">\n            + New Note\n          </Link>\n\n          <hr />\n\n          {data.noteListItems.length === 0 ? (\n            <p className=\"p-4\">No notes yet</p>\n          ) : (\n            <ol>\n              {data.noteListItems.map((note) => (\n                <li key={note.id}>\n                  <NavLink\n                    className={({ isActive }) =>\n                      `block border-b p-4 text-xl ${isActive ? \"bg-white\" : \"\"}`\n                    }\n                    to={note.id}\n                  >\n                    \uD83D\uDCDD {note.title}\n                  </NavLink>\n                </li>\n              ))}\n            </ol>\n          )}\n        </div>\n\n        <div className=\"flex-1 p-6\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n}\n", "import type { User, Note } from \"@prisma/client\";\n\nimport { prisma } from \"~/db.server\";\n\nexport type { Note } from \"@prisma/client\";\n\nexport function getNote({\n  id,\n  userId,\n}: Pick<Note, \"id\"> & {\n  userId: User[\"id\"];\n}) {\n  return prisma.note.findFirst({\n    select: { id: true, body: true, title: true },\n    where: { id, userId },\n  });\n}\n\nexport function getNoteListItems({ userId }: { userId: User[\"id\"] }) {\n  return prisma.note.findMany({\n    where: { userId },\n    select: { id: true, title: true },\n    orderBy: { updatedAt: \"desc\" },\n  });\n}\n\nexport function createNote({\n  body,\n  title,\n  userId,\n}: Pick<Note, \"body\" | \"title\"> & {\n  userId: User[\"id\"];\n}) {\n  return prisma.note.create({\n    data: {\n      title,\n      body,\n      user: {\n        connect: {\n          id: userId,\n        },\n      },\n    },\n  });\n}\n\nexport function deleteNote({\n  id,\n  userId,\n}: Pick<Note, \"id\"> & { userId: User[\"id\"] }) {\n  return prisma.note.deleteMany({\n    where: { id, userId },\n  });\n}\n", "import type { ActionArgs, LoaderArgs } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useCatch, useLoaderData } from \"@remix-run/react\";\nimport invariant from \"tiny-invariant\";\n\nimport { deleteNote } from \"~/models/note.server\";\nimport { getNote } from \"~/models/note.server\";\nimport { requireUserId } from \"~/session.server\";\n\nexport async function loader({ request, params }: LoaderArgs) {\n  const userId = await requireUserId(request);\n  invariant(params.noteId, \"noteId not found\");\n\n  const note = await getNote({ userId, id: params.noteId });\n  if (!note) {\n    throw new Response(\"Not Found\", { status: 404 });\n  }\n  return json({ note });\n}\n\nexport async function action({ request, params }: ActionArgs) {\n  const userId = await requireUserId(request);\n  invariant(params.noteId, \"noteId not found\");\n\n  await deleteNote({ userId, id: params.noteId });\n\n  return redirect(\"/notes\");\n}\n\nexport default function NoteDetailsPage() {\n  const data = useLoaderData<typeof loader>();\n\n  return (\n    <div>\n      <h3 className=\"text-2xl font-bold\">{data.note.title}</h3>\n      <p className=\"py-6\">{data.note.body}</p>\n      <hr className=\"my-4\" />\n      <Form method=\"post\">\n        <button\n          type=\"submit\"\n          className=\"rounded bg-blue-500  py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n        >\n          Delete\n        </button>\n      </Form>\n    </div>\n  );\n}\n\nexport function ErrorBoundary({ error }: { error: Error }) {\n  console.error(error);\n\n  return <div>An unexpected error occurred: {error.message}</div>;\n}\n\nexport function CatchBoundary() {\n  const caught = useCatch();\n\n  if (caught.status === 404) {\n    return <div>Note not found</div>;\n  }\n\n  throw new Error(`Unexpected caught response with status: ${caught.status}`);\n}\n", "import { Link } from \"@remix-run/react\";\n\nexport default function NoteIndexPage() {\n  return (\n    <p>\n      No note selected. Select a note on the left, or{\" \"}\n      <Link to=\"new\" className=\"text-blue-500 underline\">\n        create a new note.\n      </Link>\n    </p>\n  );\n}\n", "import type { ActionArgs } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useActionData } from \"@remix-run/react\";\nimport * as React from \"react\";\n\nimport { createNote } from \"~/models/note.server\";\nimport { requireUserId } from \"~/session.server\";\n\nexport async function action({ request }: ActionArgs) {\n  const userId = await requireUserId(request);\n\n  const formData = await request.formData();\n  const title = formData.get(\"title\");\n  const body = formData.get(\"body\");\n\n  if (typeof title !== \"string\" || title.length === 0) {\n    return json(\n      { errors: { title: \"Title is required\", body: null } },\n      { status: 400 }\n    );\n  }\n\n  if (typeof body !== \"string\" || body.length === 0) {\n    return json(\n      { errors: { title: null, body: \"Body is required\" } },\n      { status: 400 }\n    );\n  }\n\n  const note = await createNote({ title, body, userId });\n\n  return redirect(`/notes/${note.id}`);\n}\n\nexport default function NewNotePage() {\n  const actionData = useActionData<typeof action>();\n  const titleRef = React.useRef<HTMLInputElement>(null);\n  const bodyRef = React.useRef<HTMLTextAreaElement>(null);\n\n  React.useEffect(() => {\n    if (actionData?.errors?.title) {\n      titleRef.current?.focus();\n    } else if (actionData?.errors?.body) {\n      bodyRef.current?.focus();\n    }\n  }, [actionData]);\n\n  return (\n    <Form\n      method=\"post\"\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: 8,\n        width: \"100%\",\n      }}\n    >\n      <div>\n        <label className=\"flex w-full flex-col gap-1\">\n          <span>Title: </span>\n          <input\n            ref={titleRef}\n            name=\"title\"\n            className=\"flex-1 rounded-md border-2 border-blue-500 px-3 text-lg leading-loose\"\n            aria-invalid={actionData?.errors?.title ? true : undefined}\n            aria-errormessage={\n              actionData?.errors?.title ? \"title-error\" : undefined\n            }\n          />\n        </label>\n        {actionData?.errors?.title && (\n          <div className=\"pt-1 text-red-700\" id=\"title-error\">\n            {actionData.errors.title}\n          </div>\n        )}\n      </div>\n\n      <div>\n        <label className=\"flex w-full flex-col gap-1\">\n          <span>Body: </span>\n          <textarea\n            ref={bodyRef}\n            name=\"body\"\n            rows={8}\n            className=\"w-full flex-1 rounded-md border-2 border-blue-500 py-2 px-3 text-lg leading-6\"\n            aria-invalid={actionData?.errors?.body ? true : undefined}\n            aria-errormessage={\n              actionData?.errors?.body ? \"body-error\" : undefined\n            }\n          />\n        </label>\n        {actionData?.errors?.body && (\n          <div className=\"pt-1 text-red-700\" id=\"body-error\">\n            {actionData.errors.body}\n          </div>\n        )}\n      </div>\n\n      <div className=\"text-right\">\n        <button\n          type=\"submit\"\n          className=\"rounded bg-blue-500 py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n        >\n          Save\n        </button>\n      </div>\n    </Form>\n  );\n}\n", "import type { ActionArgs, LoaderArgs, MetaFunction } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, Link, useActionData, useSearchParams } from \"@remix-run/react\";\nimport * as React from \"react\";\n\nimport { getUserId, createUserSession } from \"~/session.server\";\n\nimport { createUser, getUserByEmail } from \"~/models/user.server\";\nimport { safeRedirect, validateEmail } from \"~/utils\";\n\nexport async function loader({ request }: LoaderArgs) {\n  const userId = await getUserId(request);\n  if (userId) return redirect(\"/\");\n  return json({});\n}\n\nexport async function action({ request }: ActionArgs) {\n  const formData = await request.formData();\n  const email = formData.get(\"email\");\n  const password = formData.get(\"password\");\n  const redirectTo = safeRedirect(formData.get(\"redirectTo\"), \"/\");\n\n  if (!validateEmail(email)) {\n    return json(\n      { errors: { email: \"Email is invalid\", password: null } },\n      { status: 400 }\n    );\n  }\n\n  if (typeof password !== \"string\" || password.length === 0) {\n    return json(\n      { errors: { email: null, password: \"Password is required\" } },\n      { status: 400 }\n    );\n  }\n\n  if (password.length < 8) {\n    return json(\n      { errors: { email: null, password: \"Password is too short\" } },\n      { status: 400 }\n    );\n  }\n\n  const existingUser = await getUserByEmail(email);\n  if (existingUser) {\n    return json(\n      {\n        errors: {\n          email: \"A user already exists with this email\",\n          password: null,\n        },\n      },\n      { status: 400 }\n    );\n  }\n\n  const user = await createUser(email, password);\n\n  return createUserSession({\n    request,\n    userId: user.id,\n    remember: false,\n    redirectTo,\n  });\n}\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: \"Sign Up\",\n  };\n};\n\nexport default function Join() {\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get(\"redirectTo\") ?? undefined;\n  const actionData = useActionData<typeof action>();\n  const emailRef = React.useRef<HTMLInputElement>(null);\n  const passwordRef = React.useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    if (actionData?.errors?.email) {\n      emailRef.current?.focus();\n    } else if (actionData?.errors?.password) {\n      passwordRef.current?.focus();\n    }\n  }, [actionData]);\n\n  return (\n    <div className=\"flex min-h-full flex-col justify-center\">\n      <div className=\"mx-auto w-full max-w-md px-8\">\n        <Form method=\"post\" className=\"space-y-6\">\n          <div>\n            <label\n              htmlFor=\"email\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Email address\n            </label>\n            <div className=\"mt-1\">\n              <input\n                ref={emailRef}\n                id=\"email\"\n                required\n                autoFocus={true}\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                aria-invalid={actionData?.errors?.email ? true : undefined}\n                aria-describedby=\"email-error\"\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n              />\n              {actionData?.errors?.email && (\n                <div className=\"pt-1 text-red-700\" id=\"email-error\">\n                  {actionData.errors.email}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"password\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Password\n            </label>\n            <div className=\"mt-1\">\n              <input\n                id=\"password\"\n                ref={passwordRef}\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"new-password\"\n                aria-invalid={actionData?.errors?.password ? true : undefined}\n                aria-describedby=\"password-error\"\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n              />\n              {actionData?.errors?.password && (\n                <div className=\"pt-1 text-red-700\" id=\"password-error\">\n                  {actionData.errors.password}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\n          <button\n            type=\"submit\"\n            className=\"w-full rounded bg-blue-500  py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n          >\n            Create Account\n          </button>\n          <div className=\"flex items-center justify-center\">\n            <div className=\"text-center text-sm text-gray-500\">\n              Already have an account?{\" \"}\n              <Link\n                className=\"text-blue-500 underline\"\n                to={{\n                  pathname: \"/login\",\n                  search: searchParams.toString(),\n                }}\n              >\n                Log in\n              </Link>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n}\n", "export default {'version':'610665bb','entry':{'module':'/build/entry.client-KR4POKZU.js','imports':['/build/_shared/chunk-PDR6J4WA.js','/build/_shared/chunk-NB6CB35D.js','/build/_shared/chunk-MPGGF27F.js','/build/_shared/chunk-AWG3O6NZ.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-XQJ24QI6.js','imports':['/build/_shared/chunk-Y6XVBMDT.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/healthcheck':{'id':'routes/healthcheck','parentId':'root','path':'healthcheck','index':undefined,'caseSensitive':undefined,'module':'/build/routes/healthcheck-D2FTVWR5.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-4WOUVMWP.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/join':{'id':'routes/join','parentId':'root','path':'join','index':undefined,'caseSensitive':undefined,'module':'/build/routes/join-QAACZOEZ.js','imports':['/build/_shared/chunk-5FXPDKBM.js','/build/_shared/chunk-JWBROJUR.js','/build/_shared/chunk-2FM4UGS6.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/login':{'id':'routes/login','parentId':'root','path':'login','index':undefined,'caseSensitive':undefined,'module':'/build/routes/login-OTYFOXEH.js','imports':['/build/_shared/chunk-5FXPDKBM.js','/build/_shared/chunk-JWBROJUR.js','/build/_shared/chunk-2FM4UGS6.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/logout':{'id':'routes/logout','parentId':'root','path':'logout','index':undefined,'caseSensitive':undefined,'module':'/build/routes/logout-VH5G5TMR.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/notes':{'id':'routes/notes','parentId':'root','path':'notes','index':undefined,'caseSensitive':undefined,'module':'/build/routes/notes-VGNKTOVJ.js','imports':['/build/_shared/chunk-JWBROJUR.js','/build/_shared/chunk-F4EOO5R2.js','/build/_shared/chunk-2FM4UGS6.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/notes/$noteId':{'id':'routes/notes/$noteId','parentId':'routes/notes','path':':noteId','index':undefined,'caseSensitive':undefined,'module':'/build/routes/notes/$noteId-MBOQH5A5.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':true,'hasErrorBoundary':true},'routes/notes/index':{'id':'routes/notes/index','parentId':'routes/notes','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/notes/index-4YRJDM6E.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/notes/new':{'id':'routes/notes/new','parentId':'routes/notes','path':'new','index':undefined,'caseSensitive':undefined,'module':'/build/routes/notes/new-ITC62OZ5.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-610665BB.js'};", "\nimport * as entryServer from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\entry.server.tsx\";\nimport * as route0 from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\root.tsx\";\nimport * as route1 from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\routes\\\\healthcheck.tsx\";\nimport * as route2 from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\routes\\\\logout.tsx\";\nimport * as route3 from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\routes\\\\index.tsx\";\nimport * as route4 from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\routes\\\\login.tsx\";\nimport * as route5 from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\routes\\\\notes.tsx\";\nimport * as route6 from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\routes\\\\notes\\\\$noteId.tsx\";\nimport * as route7 from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\routes\\\\notes\\\\index.tsx\";\nimport * as route8 from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\routes\\\\notes\\\\new.tsx\";\nimport * as route9 from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\routes\\\\join.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public\\\\build\";\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/healthcheck\": {\n      id: \"routes/healthcheck\",\n      parentId: \"root\",\n      path: \"healthcheck\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/logout\": {\n      id: \"routes/logout\",\n      parentId: \"root\",\n      path: \"logout\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/login\": {\n      id: \"routes/login\",\n      parentId: \"root\",\n      path: \"login\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/notes\": {\n      id: \"routes/notes\",\n      parentId: \"root\",\n      path: \"notes\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/notes/$noteId\": {\n      id: \"routes/notes/$noteId\",\n      parentId: \"routes/notes\",\n      path: \":noteId\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/notes/index\": {\n      id: \"routes/notes/index\",\n      parentId: \"routes/notes\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route7\n    },\n  \"routes/notes/new\": {\n      id: \"routes/notes/new\",\n      parentId: \"routes/notes\",\n      path: \"new\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route8\n    },\n  \"routes/join\": {\n      id: \"routes/join\",\n      parentId: \"root\",\n      path: \"join\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route9\n    }\n  };"],
  "mappings": "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",
  "names": []
}
