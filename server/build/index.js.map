{
  "version": 3,
  "sources": ["<stdin>", "../../node_modules/@remix-run/dev/dist/compiler/shims/react.ts", "../../app/entry.server.tsx", "C:\\Users\\jreis\\Desktop\\Sites\\poker-world\\app\\root.tsx", "../../app/session.server.ts", "../../app/models/user.server.ts", "../../app/db.server.ts", "../../app/context.tsx", "C:\\Users\\jreis\\Desktop\\Sites\\poker-world\\app\\routes\\healthcheck.tsx", "C:\\Users\\jreis\\Desktop\\Sites\\poker-world\\app\\routes\\logout.tsx", "C:\\Users\\jreis\\Desktop\\Sites\\poker-world\\app\\routes\\index.tsx", "../../app/components/Card.tsx", "../../app/components/PlayerDisplay.tsx", "../../app/components/Table.tsx", "../../app/components/Pot.tsx", "../../app/hooks/useGameState.ts", "../../app/interfaces/index.ts", "../../app/utils.ts", "../../app/functions/common.ts", "../../app/functions/prepareForFold.ts", "../../app/functions/prepareForCheckCall.ts", "../../app/functions/prepareForBet.ts", "C:\\Users\\jreis\\Desktop\\Sites\\poker-world\\app\\routes\\login.tsx", "C:\\Users\\jreis\\Desktop\\Sites\\poker-world\\app\\routes\\notes.tsx", "../../app/models/note.server.ts", "C:\\Users\\jreis\\Desktop\\Sites\\poker-world\\app\\routes\\notes\\$noteId.tsx", "C:\\Users\\jreis\\Desktop\\Sites\\poker-world\\app\\routes\\notes\\index.tsx", "C:\\Users\\jreis\\Desktop\\Sites\\poker-world\\app\\routes\\notes\\new.tsx", "C:\\Users\\jreis\\Desktop\\Sites\\poker-world\\app\\routes\\join.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import { PassThrough } from \"stream\";\nimport { renderToPipeableStream } from \"react-dom/server\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { Response } from \"@remix-run/node\";\nimport type { EntryContext, Headers } from \"@remix-run/node\";\nimport isbot from \"isbot\";\n\nconst ABORT_DELAY = 5000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  const callbackName = isbot(request.headers.get(\"user-agent\"))\n    ? \"onAllReady\"\n    : \"onShellReady\";\n\n  return new Promise((resolve, reject) => {\n    let didError = false;\n\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer context={remixContext} url={request.url} />,\n      {\n        [callbackName]() {\n          let body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body, {\n              status: didError ? 500 : responseStatusCode,\n              headers: responseHeaders,\n            })\n          );\n          pipe(body);\n        },\n        onShellError(err: unknown) {\n          reject(err);\n        },\n        onError(error: unknown) {\n          didError = true;\n          console.error(error);\n        },\n      }\n    );\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "import type { LinksFunction, LoaderArgs, MetaFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useLocation,\n  useMatches,\n} from \"@remix-run/react\";\n\nimport tailwindStylesheetUrl from \"./styles/tailwind.css\";\nimport { getUser } from \"./session.server\";\nimport { useEffect, useState } from \"react\";\nimport { io, Socket } from \"socket.io-client\";\nimport { SocketProvider } from \"./context\";\n\nexport const links: LinksFunction = () => {\n  return [{ rel: \"stylesheet\", href: tailwindStylesheetUrl }];\n};\n\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"Remix Notes\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\nexport async function loader({ request }: LoaderArgs) {\n  return json({\n    user: await getUser(request),\n  });\n}\n\nexport default function App() {\n  const [socket, setSocket] = useState<Socket>();\n\n  useEffect(() => {\n    const socket = io();\n    setSocket(socket);\n    return () => {\n      socket.close();\n    };\n  }, []);\n\n  return (\n    <html lang=\"en\" className=\"h-full\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body className=\"h-full\">\n        <SocketProvider socket={socket}>\n          <Outlet />\n        </SocketProvider>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n", "import { createCookieSessionStorage, redirect } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\n\nimport type { User } from \"~/models/user.server\";\nimport { getUserById } from \"~/models/user.server\";\n\ninvariant(process.env.SESSION_SECRET, \"SESSION_SECRET must be set\");\n\nexport const sessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: \"__session\",\n    httpOnly: true,\n    path: \"/\",\n    sameSite: \"lax\",\n    secrets: [process.env.SESSION_SECRET],\n    secure: process.env.NODE_ENV === \"production\",\n  },\n});\n\nconst USER_SESSION_KEY = \"userId\";\n\nexport async function getSession(request: Request) {\n  const cookie = request.headers.get(\"Cookie\");\n  return sessionStorage.getSession(cookie);\n}\n\nexport async function getUserId(\n  request: Request\n): Promise<User[\"id\"] | undefined> {\n  const session = await getSession(request);\n  const userId = session.get(USER_SESSION_KEY);\n  return userId;\n}\n\nexport async function getUser(request: Request) {\n  const userId = await getUserId(request);\n  if (userId === undefined) return null;\n\n  const user = await getUserById(userId);\n  if (user) return user;\n\n  throw await logout(request);\n}\n\nexport async function requireUserId(\n  request: Request,\n  redirectTo: string = new URL(request.url).pathname\n) {\n  const userId = await getUserId(request);\n  if (!userId) {\n    const searchParams = new URLSearchParams([[\"redirectTo\", redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return userId;\n}\n\nexport async function requireUser(request: Request) {\n  const userId = await requireUserId(request);\n\n  const user = await getUserById(userId);\n  if (user) return user;\n\n  throw await logout(request);\n}\n\nexport async function createUserSession({\n  request,\n  userId,\n  remember,\n  redirectTo,\n}: {\n  request: Request;\n  userId: string;\n  remember: boolean;\n  redirectTo: string;\n}) {\n  const session = await getSession(request);\n  session.set(USER_SESSION_KEY, userId);\n  return redirect(redirectTo, {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.commitSession(session, {\n        maxAge: remember\n          ? 60 * 60 * 24 * 7 // 7 days\n          : undefined,\n      }),\n    },\n  });\n}\n\nexport async function logout(request: Request) {\n  const session = await getSession(request);\n  return redirect(\"/\", {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.destroySession(session),\n    },\n  });\n}\n", "import type { Password, User } from \"@prisma/client\";\nimport bcrypt from \"bcryptjs\";\n\nimport { prisma } from \"~/db.server\";\n\nexport type { User } from \"@prisma/client\";\n\nexport async function getUserById(id: User[\"id\"]) {\n  return prisma.user.findUnique({ where: { id } });\n}\n\nexport async function getUserByEmail(email: User[\"email\"]) {\n  return prisma.user.findUnique({ where: { email } });\n}\n\nexport async function createUser(email: User[\"email\"], password: string) {\n  const hashedPassword = await bcrypt.hash(password, 10);\n\n  return prisma.user.create({\n    data: {\n      email,\n      password: {\n        create: {\n          hash: hashedPassword,\n        },\n      },\n    },\n  });\n}\n\nexport async function deleteUserByEmail(email: User[\"email\"]) {\n  return prisma.user.delete({ where: { email } });\n}\n\nexport async function verifyLogin(\n  email: User[\"email\"],\n  password: Password[\"hash\"]\n) {\n  const userWithPassword = await prisma.user.findUnique({\n    where: { email },\n    include: {\n      password: true,\n    },\n  });\n\n  if (!userWithPassword || !userWithPassword.password) {\n    return null;\n  }\n\n  const isValid = await bcrypt.compare(\n    password,\n    userWithPassword.password.hash\n  );\n\n  if (!isValid) {\n    return null;\n  }\n\n  const { password: _password, ...userWithoutPassword } = userWithPassword;\n\n  return userWithoutPassword;\n}\n", "import { PrismaClient } from \"@prisma/client\";\n\nlet prisma: PrismaClient;\n\ndeclare global {\n  var __db__: PrismaClient;\n}\n\n// this is needed because in development we don't want to restart\n// the server with every change, but we want to make sure we don't\n// create a new connection to the DB with every change either.\n// in production we'll have a single connection to the DB.\nif (process.env.NODE_ENV === \"production\") {\n  prisma = new PrismaClient();\n} else {\n  if (!global.__db__) {\n    global.__db__ = new PrismaClient();\n  }\n  prisma = global.__db__;\n  prisma.$connect();\n}\n\nexport { prisma };\n", "import type { ReactNode } from \"react\";\r\nimport { createContext, useContext } from \"react\";\r\nimport type { Socket } from \"socket.io-client\";\r\n\r\ntype ProviderProps = {\r\n  socket: Socket | undefined;\r\n  children: ReactNode;\r\n};\r\n\r\nconst context = createContext<Socket | undefined>(undefined);\r\n\r\nexport function useSocket() {\r\n  return useContext(context);\r\n}\r\n\r\nexport function SocketProvider({ socket, children }: ProviderProps) {\r\n  return <context.Provider value={socket}>{children}</context.Provider>;\r\n}", "// learn more: https://fly.io/docs/reference/configuration/#services-http_checks\nimport type { LoaderArgs } from \"@remix-run/node\";\n\nimport { prisma } from \"~/db.server\";\n\nexport async function loader({ request }: LoaderArgs) {\n  const host =\n    request.headers.get(\"X-Forwarded-Host\") ?? request.headers.get(\"host\");\n\n  try {\n    const url = new URL(\"/\", `http://${host}`);\n    // if we can connect to the database and make a simple query\n    // and make a HEAD request to ourselves, then we're good.\n    await Promise.all([\n      prisma.user.count(),\n      fetch(url.toString(), { method: \"HEAD\" }).then((r) => {\n        if (!r.ok) return Promise.reject(r);\n      }),\n    ]);\n    return new Response(\"OK\");\n  } catch (error: unknown) {\n    console.log(\"healthcheck \u274C\", { error });\n    return new Response(\"ERROR\", { status: 500 });\n  }\n}\n", "import type { ActionArgs } from \"@remix-run/node\";\nimport { redirect } from \"@remix-run/node\";\n\nimport { logout } from \"~/session.server\";\n\nexport async function action({ request }: ActionArgs) {\n  return logout(request);\n}\n\nexport async function loader() {\n  return redirect(\"/\");\n}\n", "import { LinksFunction, MetaFunction } from \"@remix-run/node\";\r\nimport { useEffect } from \"react\";\r\nimport Card from \"~/components/Card\";\r\nimport PlayerDisplay from \"~/components/PlayerDisplay\";\r\nimport Table from \"~/components/Table\";\r\nimport { AdvanceGameProps, NextProps } from \"~/utils/game\";\r\nimport { CardProps, StartHoldEmGameProps } from \"~/utils/poker\";\r\nimport cardsIEStyles from \"../styles/cards-ie.css\";\r\nimport cardsIE9Styles from \"../styles/cards-ie9.css\";\r\nimport cardStyles from \"../styles/cards.css\";\r\nimport progressStyles from \"../styles/progress.css\";\r\n\r\nimport { isEmpty, isNumber } from \"lodash\";\r\nimport Pot from \"~/components/Pot\";\r\nimport { useSocket } from \"~/context\";\r\nimport useGameState from \"~/hooks/useGameState\";\r\nimport { pluralize } from \"~/utils\";\r\nimport {\r\n  Player,\r\n  SendCheckOrCallDataProps,\r\n  SendBetDataProps,\r\n  GameState,\r\n  SendFoldDataProps,\r\n} from \"~/interfaces\";\r\nimport prepareForFold from \"~/functions/prepareForFold\";\r\nimport prepareForCheckCall from \"~/functions/prepareForCheckCall\";\r\nimport prepareForBet from \"~/functions/prepareForBet\";\r\n\r\nexport const links: LinksFunction = () => {\r\n  return [\r\n    { rel: \"stylesheet\", href: cardStyles },\r\n    { rel: \"stylesheet\", href: cardsIEStyles },\r\n    { rel: \"stylesheet\", href: cardsIE9Styles },\r\n    { rel: \"stylesheet\", href: progressStyles },\r\n  ];\r\n};\r\n\r\nexport const meta: MetaFunction = () => ({\r\n  charset: \"utf-8\",\r\n  title: \"Poker World\",\r\n  viewport: \"width=device-width,initial-scale=1\",\r\n});\r\n\r\nexport default function Index() {\r\n  const socket = useSocket();\r\n\r\n  const { values, actions } = useGameState();\r\n\r\n  const {\r\n    gameState,\r\n    logs,\r\n    gameStarted,\r\n    dealerCards,\r\n    isSnackbarOpen,\r\n    snackbarMessage,\r\n    dealtCards,\r\n    players,\r\n    activePlayerIndex,\r\n    activePlayer,\r\n    dealer,\r\n    littleBlind,\r\n    bigBlind,\r\n    littleBlindAmount,\r\n    bigBlindAmount,\r\n    bet,\r\n    pots,\r\n    activeBet,\r\n    turnNumber,\r\n    blinds,\r\n    winner,\r\n    gameOver,\r\n    hands,\r\n    activePlayerCount,\r\n    winningCards,\r\n    wonAmount,\r\n    playerName,\r\n    buttonClicked,\r\n    playerCount,\r\n    playerNames,\r\n    playerSocket,\r\n    playerSockets,\r\n    player,\r\n    joinedGame,\r\n    turnsThisRound,\r\n    turnsNextRound,\r\n    earlyWin,\r\n    needResponsesFrom,\r\n    littleBlindIndex,\r\n    bigBlindIndex,\r\n    manualAdvance,\r\n    ultimateWinner,\r\n    needResponsesFromIndicies,\r\n    advancingToEnd,\r\n  } = values;\r\n  const {\r\n    setGameState,\r\n    setLogs,\r\n    setGameStarted,\r\n    setDealerCards,\r\n    setIsSnackbarOpen,\r\n    setSnackbarMessage,\r\n    setDealtCards,\r\n    setPlayers,\r\n    setActivePlayerIndex,\r\n    setActivePlayer,\r\n    setDealer,\r\n    setLittleBlind,\r\n    setBigBlind,\r\n    setLittleBlindAmount,\r\n    setBigBlindAmount,\r\n    setBet,\r\n    setPots,\r\n    setActiveBet,\r\n    setTurnNumber,\r\n    setBlinds,\r\n    setWinner,\r\n    setGameOver,\r\n    setHands,\r\n    setActivePlayerCount,\r\n    setWinningCards,\r\n    setWonAmount,\r\n    setPlayerName,\r\n    setButtonClicked,\r\n    setPlayerCount,\r\n    setPlayerNames,\r\n    setPlayerSocket,\r\n    setPlayerSockets,\r\n    setPlayer,\r\n    setJoinedGame,\r\n    setTurnsThisRound,\r\n    setTurnsNextRound,\r\n    setEarlyWin,\r\n    setNeedResponsesFrom,\r\n    setLittleBlindIndex,\r\n    setDealerIndex,\r\n    setBigBlindIndex,\r\n    setManualAdvance,\r\n    setUltimateWinner,\r\n    setNeedResponsesFromIndicies,\r\n    setAdvancingToEnd,\r\n  } = actions;\r\n\r\n  const handleCheckOrCall = (callAmount: number) => {\r\n    let checkOrCallProps = prepareForCheckCall({ ...values, callAmount });\r\n\r\n    socket!.emit(\"playerCheckedOrCalled\", checkOrCallProps);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n\r\n    const advance = (data: AdvanceGameProps, type: string) => {\r\n      let tempNeedResponsesFrom = data.needResponsesFrom;\r\n\r\n      let needResponsesIndicies: number[] = [];\r\n\r\n      if (type === \"BET\") {\r\n        tempNeedResponsesFrom =\r\n          data.players.filter((p) => !p.folded).length - 1;\r\n        setNeedResponsesFrom(data.players.filter((p) => !p.folded).length - 1);\r\n\r\n        data.players.forEach((p, index) => {\r\n          if (!p.folded) {\r\n            needResponsesIndicies.push(index);\r\n          }\r\n        });\r\n\r\n        setNeedResponsesFromIndicies(needResponsesIndicies);\r\n      } else {\r\n        tempNeedResponsesFrom = tempNeedResponsesFrom - 1;\r\n        setNeedResponsesFrom(tempNeedResponsesFrom);\r\n      }\r\n\r\n      if (type === \"FOLD\") {\r\n        setActivePlayerCount((prev) => {\r\n          return prev - 1;\r\n        });\r\n      }\r\n\r\n      let tempActivePlayerCount = data.players.filter((p) => !p.folded).length;\r\n\r\n      if (tempActivePlayerCount === 1) {\r\n        // need to end the round. last active player wins\r\n        if (data.activePlayer.socket === socket?.id) {\r\n          endRound(data);\r\n          return;\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (tempNeedResponsesFrom <= 0) {\r\n        if (data.activePlayer.socket === socket?.id) {\r\n          advanceGame({\r\n            ...data,\r\n            needResponsesFromIndicies: needResponsesIndicies,\r\n          });\r\n        }\r\n        setTurnNumber(0);\r\n      } else {\r\n        setTurnNumber((prev) => prev + 1);\r\n      }\r\n    };\r\n\r\n    socket.on(\r\n      \"confirmation\",\r\n      (data: { playerNames: any[]; playerSockets: any[] }) => {\r\n        setPlayerNames(data.playerNames);\r\n        setPlayerSockets(data.playerSockets);\r\n        setPlayerCount(data.playerNames.length);\r\n      }\r\n    );\r\n\r\n    socket.on(\r\n      \"playerDisconnect\",\r\n      (data: { playerNames: any[]; playerSockets: any[] }) => {\r\n        setPlayerNames(data.playerNames);\r\n        setPlayerSockets(data.playerSockets);\r\n        setPlayerCount(data.playerNames.length);\r\n      }\r\n    );\r\n\r\n    socket.on(\"dealerCards\", (data) => {\r\n      setDealerCards(data);\r\n    });\r\n\r\n    socket.on(\"playerJoined\", (data) => {\r\n      setPlayerNames((prevPN) => [...prevPN, data.playerName]);\r\n      setPlayerSockets((prevPS) => [...prevPS, data.socket]);\r\n      if (data.socket === socket.id) {\r\n        setPlayerSocket(data.socket);\r\n        setPlayer(data);\r\n        setJoinedGame(true);\r\n      }\r\n      let newPlayerCount = 0;\r\n      setPlayerCount((prevPC) => {\r\n        newPlayerCount = prevPC + 1;\r\n        return newPlayerCount;\r\n      });\r\n      setButtonClicked(false);\r\n    });\r\n\r\n    socket.on(\"sendHoldEmData\", (data: StartHoldEmGameProps) => {\r\n      setGameState(data.gameState);\r\n      setGameStarted(data.gameStarted);\r\n      setGameOver(data.gameOver);\r\n      setDealtCards(data.dealtCards);\r\n      setDealerCards(data.dealerCards);\r\n      setPlayers(data.players);\r\n\r\n      setPots(data.pots);\r\n\r\n      setUltimateWinner(null);\r\n\r\n      setWinningCards([]);\r\n\r\n      setActiveBet(data.blinds[1]);\r\n\r\n      let playersWithChips = data.players.filter((p) => p.chips > 0).length;\r\n\r\n      if (playersWithChips === 2) {\r\n        setBet(data.blinds[0]);\r\n      } else {\r\n        setBet(data.blinds[1]);\r\n      }\r\n\r\n      let needResponsesIndicies: number[] = [];\r\n\r\n      data.players.forEach((p, index) => {\r\n        if (p.chips > 0) {\r\n          needResponsesIndicies.push(index);\r\n        }\r\n      });\r\n\r\n      setNeedResponsesFromIndicies(needResponsesIndicies);\r\n\r\n      setNeedResponsesFrom(data.players.filter((p) => p.chips > 0).length);\r\n\r\n      let activePlayers = data.players.filter(\r\n        (p: { chips: number }) => p.chips > 0\r\n      );\r\n\r\n      let nextDealerIndex = data.hands.length % activePlayers.length;\r\n      let nextLittleBlindIndex = (data.hands.length + 1) % activePlayers.length;\r\n      let nextBigBlindIndex = (data.hands.length + 2) % activePlayers.length;\r\n\r\n      setActiveBet(activePlayers.length === 2 ? data.blinds[0] : data.blinds[1]);\r\n\r\n      setDealer(activePlayers[nextDealerIndex]);\r\n      setLittleBlind(activePlayers[nextLittleBlindIndex]);\r\n      setBigBlind(activePlayers[nextBigBlindIndex]);\r\n\r\n      setDealerIndex(nextDealerIndex);\r\n      setLittleBlindIndex(nextLittleBlindIndex);\r\n      setBigBlindIndex(nextBigBlindIndex);\r\n\r\n      setActivePlayerIndex(\r\n        activePlayers.length >= 3 ? nextDealerIndex : nextLittleBlindIndex\r\n      );\r\n\r\n      if (activePlayers.length > 0) {\r\n        setActivePlayer(\r\n          activePlayers.length >= 3 || activePlayers.length === 0\r\n            ? activePlayers[nextDealerIndex]\r\n            : activePlayers[nextLittleBlindIndex]\r\n        );\r\n      }\r\n\r\n      setBlinds(data.blinds);\r\n\r\n      setLittleBlindAmount(data.blinds[0]);\r\n      setBigBlindAmount(data.blinds[1]);\r\n    });\r\n\r\n    socket.on(\"sendBetData\", (data: SendBetDataProps) => {\r\n      setPots(data.pots);\r\n      setPlayers(data.players);\r\n\r\n      setActiveBet(data.activeBet);\r\n\r\n      setBet(data.activeBet + data.bigBlindAmount);\r\n      setActivePlayerIndex(data.activePlayerIndex);\r\n\r\n      setActivePlayer(data.activePlayer);\r\n      setLogs((prev) => [\r\n        ...prev,\r\n        `${data.players[data.prevActivePlayerIndex].name} bet ${\r\n          data.activeBet\r\n        }`,\r\n      ]);\r\n      setSnackbarMessage(\r\n        `${data.players[data.prevActivePlayerIndex].name} bet ${data.activeBet}`\r\n      );\r\n      setIsSnackbarOpen(true);\r\n\r\n      setNeedResponsesFromIndicies(data.needResponsesFromIndicies);\r\n\r\n      setNeedResponsesFrom(data.needResponsesFrom);\r\n\r\n      const advanceDataProps: AdvanceGameProps = {\r\n        activePlayer: data.activePlayer,\r\n        gameState: data.gameState,\r\n        dealerCards: data.dealerCards,\r\n        players: data.players,\r\n        hands: data.hands,\r\n        pots: data.pots,\r\n        activeBet: data.activeBet,\r\n        turnsNextRound: data.turnsNextRound,\r\n        turnsThisRound: data.turnsThisRound,\r\n        needResponsesFrom: data.needResponsesFrom,\r\n        needResponsesFromIndicies: data.needResponsesFromIndicies,\r\n        bigBlindAmount: data.bigBlindAmount,\r\n      };\r\n\r\n      advance(advanceDataProps, \"BET\");\r\n    });\r\n\r\n    socket.on(\"sendShowCardsData\", (data: { players: any[] }) => {\r\n      setPlayers(data.players);\r\n    });\r\n\r\n    socket.on(\"sendCheckOrCallData\", (data: SendCheckOrCallDataProps) => {\r\n      setPots(data.pots);\r\n      setPlayers(data.players);\r\n      setGameState(data.gameState);\r\n      setActivePlayerIndex(data.activePlayerIndex);\r\n\r\n      setActivePlayer(data.activePlayer);\r\n\r\n      setLittleBlindIndex(data.littleBlindIndex);\r\n      setBigBlindIndex(data.bigBlindIndex);\r\n\r\n      if (data.activeBet <= data.bigBlindAmount!) {\r\n        if (\r\n          data.gameState === GameState.Preflop &&\r\n          data.littleBlindIndex == data.activePlayerIndex\r\n        ) {\r\n          setActiveBet(data.littleBlindAmount!);\r\n        } else if (\r\n          data.gameState === GameState.Preflop &&\r\n          data.prevActivePlayerIndex == data.littleBlindIndex\r\n        ) {\r\n          setActiveBet(0);\r\n        } else {\r\n          if (isNumber(data.activeBet)) {\r\n            setActiveBet(data.activeBet);\r\n          }\r\n        }\r\n      } else {\r\n        if (isNumber(data.activeBet)) {\r\n          setActiveBet(data.activeBet);\r\n        }\r\n      }\r\n\r\n      let checkOrCallDescription = data.activeBet\r\n        ? `${data.players[data.prevActivePlayerIndex].name} called ${\r\n            data.callAmount\r\n          }`\r\n        : `${data.players[data.prevActivePlayerIndex].name} checked`;\r\n\r\n      setLogs((prev) => [...prev, checkOrCallDescription]);\r\n\r\n      setSnackbarMessage(checkOrCallDescription);\r\n      setIsSnackbarOpen(true);\r\n\r\n      setNeedResponsesFromIndicies(data.needResponsesFromIndicies);\r\n\r\n      setNeedResponsesFrom(data.needResponsesFrom);\r\n\r\n      const advanceDataProps: AdvanceGameProps = {\r\n        activePlayer: data.activePlayer,\r\n        gameState: data.gameState,\r\n        dealerCards: data.dealerCards,\r\n        players: data.players,\r\n        hands: data.hands,\r\n        pots: data.pots,\r\n        turnsNextRound,\r\n        turnsThisRound: data.turnsThisRound,\r\n        needResponsesFrom: data.needResponsesFrom,\r\n        needResponsesFromIndicies: data.needResponsesFromIndicies,\r\n        bigBlindAmount: data.bigBlindAmount!,\r\n      };\r\n\r\n      advance(advanceDataProps, \"CHECK\");\r\n    });\r\n\r\n    socket.on(\"sendFoldData\", (data: SendFoldDataProps) => {\r\n      setPlayers(data.players);\r\n      setGameState(data.gameState);\r\n      setActivePlayerIndex(data.activePlayerIndex);\r\n\r\n      setActivePlayer(data.activePlayer);\r\n\r\n      setTurnsNextRound(data.turnsNextRound);\r\n\r\n      if (data.activeBet) {\r\n        setActiveBet(data.activeBet);\r\n      } else {\r\n        if (\r\n          data.gameState === GameState.Preflop &&\r\n          data.littleBlindIndex == data.activePlayerIndex\r\n        ) {\r\n          setActiveBet(data.littleBlindAmount);\r\n        } else if (\r\n          data.gameState === GameState.Preflop &&\r\n          data.bigBlindIndex == data.activePlayerIndex\r\n        ) {\r\n          setActiveBet(0);\r\n        } else {\r\n          setActiveBet(data.activeBet);\r\n        }\r\n      }\r\n\r\n      setLogs((prev) => [\r\n        ...prev,\r\n        `${data.players[data.prevActivePlayerIndex].name} folded`,\r\n      ]);\r\n\r\n      setSnackbarMessage(\r\n        `${data.players[data.prevActivePlayerIndex].name} folded`\r\n      );\r\n      setIsSnackbarOpen(true);\r\n\r\n      setNeedResponsesFromIndicies(data.needResponsesFromIndicies);\r\n\r\n      setNeedResponsesFrom(data.needResponsesFrom);\r\n\r\n      const advanceDataProps: AdvanceGameProps = {\r\n        activePlayer: data.activePlayer,\r\n        gameState: data.gameState,\r\n        dealerCards: data.dealerCards,\r\n        players: data.players,\r\n        hands: data.hands,\r\n        pots: data.pots,\r\n        turnsNextRound: data.turnsNextRound - 1,\r\n        turnsThisRound: data.turnsThisRound,\r\n        needResponsesFrom: data.needResponsesFrom,\r\n        needResponsesFromIndicies: data.needResponsesFromIndicies,\r\n        bigBlindAmount: data.bigBlindAmount!,\r\n      };\r\n\r\n      advance(advanceDataProps, \"FOLD\");\r\n    });\r\n\r\n    socket.on(\"sendEndRoundData\", (data: NextProps) => {\r\n      setActiveBet(0);\r\n\r\n      setBet(data.bigBlindAmount * 2);\r\n\r\n      setGameState(data.gameState);\r\n\r\n      setActivePlayerCount(2 - data.players.filter((p) => p.chips <= 0).length);\r\n\r\n      setTurnsThisRound(data.turnsNextRound); // Keep Track of who folded this hand\r\n      setTurnsNextRound(2 - data.players.filter((p) => p.chips <= 0).length); // reset turns next round\r\n\r\n      setEarlyWin(true);\r\n\r\n      if (data.winner) {\r\n        setWinner(data.winner);\r\n        setLogs((prev) => [...prev, data.winner.description]);\r\n        setWinningCards(data.winningCards);\r\n        setWonAmount(data.wonAmount);\r\n      }\r\n\r\n      setHands(data.hands);\r\n\r\n      setPlayers(data.players);\r\n      setGameOver(data.gameOver);\r\n    });\r\n\r\n    socket.on(\"sendAdvanceData\", (data: NextProps) => {\r\n      if (!isEmpty(data)) {\r\n        setActiveBet(0);\r\n\r\n        setPots(data.pots);\r\n\r\n        let activePlayers =\r\n          data.players.length -\r\n          data.players.filter((p) => p.allIn || p.folded).length;\r\n\r\n        if (\r\n          (activePlayers === 0 || activePlayers === 1) &&\r\n          !data.manualAdvance\r\n        ) {\r\n          setManualAdvance(true);\r\n\r\n          let advanceGameProps: AdvanceGameProps = {\r\n            activePlayer: data.activePlayer,\r\n            gameState: data.gameState,\r\n            dealerCards: data.dealerCards,\r\n            players: data.players,\r\n            hands: data.hands,\r\n            pots: data.pots,\r\n            turnsNextRound: data.turnsNextRound,\r\n            turnsThisRound: data.turnsThisRound,\r\n            needResponsesFrom: data.turnsThisRound + 1,\r\n            manualAdvance: true,\r\n            needResponsesFromIndicies: data.needResponsesFromIndicies,\r\n            bigBlindAmount: data.bigBlindAmount,\r\n          };\r\n          if (data.activePlayer.socket === socket?.id) {\r\n            socket!.emit(\"advanceToEnd\", advanceGameProps);\r\n          }\r\n        }\r\n\r\n        setBet(data.bigBlindAmount);\r\n\r\n        setGameState(data.gameState);\r\n        setDealerCards(data.dealerCards);\r\n\r\n        setTurnsThisRound(data.turnsNextRound); // Keep Track of who folded this hand\r\n        setTurnsNextRound(2); // reset turns next round\r\n\r\n        let tempIndicies: number[] = [];\r\n\r\n        data.players.forEach((p, index) => {\r\n          if (p.chips > 0) {\r\n            tempIndicies.push(index);\r\n          }\r\n        });\r\n\r\n        setNeedResponsesFromIndicies(tempIndicies);\r\n\r\n        setNeedResponsesFrom(data.players.filter((p) => !p.folded).length);\r\n\r\n        if (data.winner) {\r\n          setWinner(data.winner);\r\n          setLogs((prev) => [...prev, data.winner.description]);\r\n          setWinningCards(data.winningCards);\r\n          setWonAmount(data.wonAmount);\r\n        }\r\n\r\n        if (data.players.filter((p) => p.chips > 0).length === 1) {\r\n          //Only one player left. Game is over\r\n          setUltimateWinner(data.winner.winner.ultimateWinner);\r\n        }\r\n\r\n        setHands(data.hands);\r\n        setPlayers(data.players);\r\n        setGameOver(data.gameOver);\r\n        setAdvancingToEnd(false);\r\n      }\r\n    });\r\n\r\n    socket.on(\"advancingToEnd\", (data) => {\r\n      setAdvancingToEnd(true);\r\n    });\r\n\r\n    socket.on(\"sendAdvanceHandsData\", (data) => {\r\n      setGameState(GameState.Preflop);\r\n      setGameStarted(true);\r\n      setGameOver(false);\r\n      setDealtCards([]);\r\n      setDealerCards([]);\r\n      setWinningCards([]);\r\n      setWinner(null);\r\n      setWonAmount(0);\r\n\r\n      let needResponsesIndicies: number[] = [];\r\n\r\n      data.players.forEach((p: { chips: number }, index: number) => {\r\n        if (p.chips > 0) {\r\n          needResponsesIndicies.push(index);\r\n        }\r\n      });\r\n\r\n      setNeedResponsesFromIndicies(needResponsesIndicies);\r\n\r\n      setNeedResponsesFrom(\r\n        data.players.filter((p: { chips: number }) => p.chips > 0).length\r\n      );\r\n      setTurnNumber(0);\r\n\r\n      setEarlyWin(false);\r\n\r\n      setActivePlayerCount(\r\n        data.players.filter((p: { chips: number }) => p.chips > 0).length\r\n      );\r\n\r\n      setTurnsThisRound(\r\n        data.players.filter((p: { chips: number }) => p.chips > 0).length\r\n      );\r\n      setTurnsNextRound(\r\n        data.players.filter((p: { chips: number }) => p.chips > 0).length\r\n      );\r\n\r\n      setPlayers(data.players);\r\n      setHands(data.hands);\r\n\r\n      let activePlayers = data.players.filter(\r\n        (p: { chips: number }) => p.chips > 0\r\n      );\r\n\r\n      let nextDealerIndex = data.hands.length % activePlayers.length;\r\n      let nextLittleBlindIndex = (data.hands.length + 1) % activePlayers.length;\r\n      let nextBigBlindIndex = (data.hands.length + 2) % activePlayers.length;\r\n\r\n      setActiveBet(activePlayers.length === 2 ? data.blinds[0] : data.blinds[1]);\r\n\r\n      setDealer(activePlayers[nextDealerIndex]);\r\n      setLittleBlind(activePlayers[nextLittleBlindIndex]);\r\n      setBigBlind(activePlayers[nextBigBlindIndex]);\r\n\r\n      setLittleBlindIndex(nextLittleBlindIndex);\r\n      setBigBlindIndex(nextBigBlindIndex);\r\n\r\n      setActivePlayerIndex(\r\n        activePlayers.length >= 3 ? nextDealerIndex : nextLittleBlindIndex\r\n      );\r\n\r\n      if (activePlayers.length > 0) {\r\n        setActivePlayer(\r\n          activePlayers.length >= 3 || activePlayers.length === 0\r\n            ? activePlayers[nextDealerIndex]\r\n            : activePlayers[nextLittleBlindIndex]\r\n        );\r\n      }\r\n\r\n      setPots([littleBlindAmount + bigBlindAmount]);\r\n    });\r\n  }, [socket]);\r\n\r\n  useEffect(() => {\r\n    if (playerCount === 3) {\r\n      // if you're the third player, aka if you were the player\r\n      // who joined last, you'll be the one to emit the event\r\n      // to the server to kick off the game.\r\n      if (playerSocket === playerSockets[2]) {\r\n        let startProps = {\r\n          playerNames,\r\n          playerSockets,\r\n          playerChips: players.map((p) => p.chips),\r\n          pastHands: hands,\r\n        };\r\n        socket!.emit(\"startHoldEmGame\", startProps);\r\n      }\r\n    }\r\n  }, [playerCount]);\r\n\r\n  useEffect(() => {\r\n    if (buttonClicked) {\r\n      if (!socket) return;\r\n      socket.emit(\"playerJoined\", { newPlayerName: playerName });\r\n    }\r\n  }, [buttonClicked]);\r\n\r\n  const handleJoinGame = () => {\r\n    setButtonClicked(true);\r\n  };\r\n\r\n  const handleFold = () => {\r\n    let foldProps = prepareForFold(values);\r\n\r\n    socket!.emit(\"playerFolded\", foldProps);\r\n  };\r\n\r\n  const handleBet = (amount: number) => {\r\n    let betProps = prepareForBet(values, amount);\r\n\r\n    socket!.emit(\"playerBet\", betProps);\r\n  };\r\n\r\n  const handlePlayerTimeout = (player: Player) => {\r\n    setLogs((prev) => [...prev, `${player.name} timed out and auto-folded`]);\r\n    setSnackbarMessage(`${player.name} timed out and auto-folded`);\r\n    setIsSnackbarOpen(true);\r\n    if (playerSocket === player.socket) {\r\n      handleFold();\r\n    }\r\n  };\r\n\r\n  const endRound = (data: AdvanceGameProps) => {\r\n    socket!.emit(\"endRound\", data);\r\n  };\r\n\r\n  const newGame = () => {\r\n    let startProps = {\r\n      playerNames,\r\n      playerSockets,\r\n      playerChips: players.map((p) => 1000),\r\n      pastHands: hands,\r\n    };\r\n    socket!.emit(\"startHoldEmGame\", startProps);\r\n  };\r\n\r\n  const newGameIncreaseBlinds = () => {\r\n    let startProps = {\r\n      playerNames,\r\n      playerSockets,\r\n      playerChips: players.map((p) => 1000),\r\n      pastHands: hands,\r\n      newBlinds: [blinds[0] * 2, blinds[1] * 2],\r\n    };\r\n    socket!.emit(\"startHoldEmGame\", startProps);\r\n  };\r\n\r\n  const advanceGame = (data: AdvanceGameProps) => {\r\n    socket!.emit(\"advanceHoldEmGame\", data);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsSnackbarOpen(false);\r\n  };\r\n\r\n  const advanceHands = () => {\r\n    socket!.emit(\"advanceHands\", { players, hands, playerSockets, blinds, });\r\n  };\r\n\r\n  const handleShowCards = (player: Player) => {\r\n    let tempPlayers = [...players];\r\n\r\n    let tempCards = tempPlayers\r\n      .filter((p) => p.socket === player.socket)\r\n      .map((p) => p.cards);\r\n\r\n    tempCards.forEach((cardArray) => {\r\n      cardArray.forEach((card: { faceUp: boolean }) => {\r\n        card.faceUp = true;\r\n      });\r\n    });\r\n\r\n    socket!.emit(\"showCards\", { players: tempPlayers });\r\n  };\r\n\r\n  const handleMuckCards = () => {};\r\n\r\n  return (\r\n    <>\r\n      <main className=\"relative flex h-screen w-screen items-center justify-center overflow-visible bg-[rgb(0,90,0)]\">\r\n        <div className=\"relative sm:pb-16 sm:pt-8\">\r\n          {gameStarted ? <Table /> : null}\r\n          <div className=\"mx-auto flex h-[80vh] w-[95vw] flex-col\">\r\n            {logs.length > 0 && (\r\n              <div className=\"fixed bottom-0 left-0 z-[55555] h-[75px] w-[250px] overflow-auto rounded-tr-xl bg-black/80 text-white\">\r\n                <div\r\n                  className=\"flex flex-col\"\r\n                  style={{ boxSizing: \"content-box\", paddingRight: \"17px\" }}\r\n                >\r\n                  {logs.map((l, index) => (\r\n                    <span key={index}>{l}</span>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n            {/* <div className=\"fixed top-0 right-0 z-[55555] h-[75px] w-[250px] overflow-auto bg-black/80 text-white\">\r\n              <div\r\n                className=\"flex flex-col\"\r\n                style={{ boxSizing: \"content-box\", paddingRight: \"17px\" }}\r\n              >\r\n                <div>{`Need responses from: ${needResponsesFrom}`}</div>\r\n                {needResponsesFromIndicies ? (\r\n                  <div>{`Response needed from: ${needResponsesFromIndicies.join(\r\n                    \", \"\r\n                  )}`}</div>\r\n                ) : null}\r\n              </div>\r\n            </div> */}\r\n            {!gameStarted && (\r\n              <>\r\n                {!joinedGame ? (\r\n                  <input\r\n                    placeholder=\"Enter player name\"\r\n                    type=\"text\"\r\n                    value={playerName}\r\n                    onChange={(e) => setPlayerName(e.target.value)}\r\n                    className=\"absolute mt-24 self-center rounded bg-black px-4 py-2 text-white\"\r\n                  />\r\n                ) : null}\r\n                <button\r\n                  className={`absolute self-center rounded bg-black px-4 py-2 text-white active:bg-white active:text-black ${\r\n                    joinedGame ? \"disabled\" : \"\"\r\n                  }`}\r\n                  onClick={handleJoinGame}\r\n                  disabled={joinedGame}\r\n                >\r\n                  {!joinedGame ? \"Join Game\" : \"Joined, awaiting players\"}\r\n                </button>\r\n                {playerNames.length > 0 ? (\r\n                  <div className=\"absolute mt-[30%] self-center text-3xl text-black\">\r\n                    {`${playerNames.length} ${pluralize(\r\n                      playerNames.length,\r\n                      \"player\",\r\n                      \"players\"\r\n                    )} joined`}\r\n                  </div>\r\n                ) : null}\r\n              </>\r\n            )}\r\n\r\n            {!gameOver && gameStarted ? (\r\n              <div className=\"z-[999999] flex w-full flex-col items-center justify-center text-xl text-white\">\r\n                <div>{`Blinds: ${blinds[0]}/${blinds[1]}`}</div>\r\n                <div>{`Pot: ${!pots ? 0 : pots.join(\", \")}`}</div>\r\n                <div>\r\n                  {winner\r\n                    ? `Hand #${hands.length}`\r\n                    : `Hand #${hands.length + 1}`}\r\n                </div>\r\n              </div>\r\n            ) : null}\r\n\r\n            {gameOver && (\r\n              <div className=\"flex flex-col\">\r\n                <div className=\"flex flex-row items-center justify-center gap-4\">\r\n                  <div\r\n                    className={`z-[410443] mb-8 text-center text-3xl text-white transition-all duration-[1000ms] ${\r\n                      !winner ? \"opacity-0\" : \"opacity-100\"\r\n                    }`}\r\n                  >\r\n                    <h1>{winner ? winner.description : null}</h1>\r\n                    <h1>\r\n                      {ultimateWinner\r\n                        ? `${ultimateWinner.name} wins the game!`\r\n                        : null}\r\n                    </h1>\r\n                  </div>\r\n                  <div className=\"z-[999999] flex flex-col items-center justify-center text-xl text-white\">\r\n                    <div>{`Blinds: ${blinds[0]}/${blinds[1]}`}</div>\r\n                    <div>{`Pot: ${!pots ? 0 : pots.join(\", \")}`}</div>\r\n                    <div>\r\n                      {winner\r\n                        ? `Hand #${hands.length}`\r\n                        : `Hand #${hands.length + 1}`}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {!ultimateWinner ? (\r\n                  <button\r\n                    id=\"next-btn\"\r\n                    className=\"z-[410444] self-center rounded bg-black px-4 py-2 text-white active:bg-white active:text-black\"\r\n                    onClick={() => advanceHands()}\r\n                  >\r\n                    Next Hand\r\n                  </button>\r\n                ) : (\r\n                  <div className=\"flex w-full flex-row items-center justify-center gap-2 self-center text-center\">\r\n                    <button\r\n                      id=\"next-btn\"\r\n                      className=\"z-[410444] self-center rounded bg-black px-4 py-2 text-white active:bg-white active:text-black\"\r\n                      onClick={() => newGame()}\r\n                    >\r\n                      New Game\r\n                    </button>\r\n                    <button\r\n                      id=\"next-btn\"\r\n                      className=\"z-[410444] self-center rounded bg-black px-4 py-2 text-white active:bg-white active:text-black\"\r\n                      onClick={() => newGameIncreaseBlinds()}\r\n                    >\r\n                      New Game, Increase Blinds\r\n                    </button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n\r\n            {gameStarted ? (\r\n              <>\r\n                <div className=\"flex flex-col items-center justify-center\">\r\n                  <div className=\"absolute bottom-[45%] z-[9999] flex w-[100vw] flex-col items-center justify-center\">\r\n                    <div className=\"playingCards simpleCards flex flex-row\">\r\n                      {dealerCards.map((card, index) => (\r\n                        <Card\r\n                          key={`${index}-${card.suit}-${card.rank}`}\r\n                          suit={card.suit}\r\n                          rank={card.rank}\r\n                          faceUp={card.faceUp}\r\n                          folded={card.faceUp}\r\n                          winner={\r\n                            winningCards.length > 0\r\n                              ? winningCards.filter((w) => {\r\n                                  return (\r\n                                    w.suit == card.suit.charAt(0) &&\r\n                                    w.value.toString().replace(\"T\", \"10\") ===\r\n                                      card.rank\r\n                                  );\r\n                                }).length > 0\r\n                              : false\r\n                          }\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                    {pots.length > 0 ? (\r\n                      <div className=\"flex w-screen flex-row items-center justify-center\">\r\n                        {pots.map((p: number) => {\r\n                          return <Pot amount={p} />;\r\n                        })}\r\n                      </div>\r\n                    ) : null}\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex flex-col gap-1\">\r\n                  {/* <div className=\"playingCards simpleCards fixed top-[30%] right-[35vw] flex w-[100vw] flex-row items-center justify-center\"></div> */}\r\n                  <div className=\"fixed bottom-[47vh] right-[35vw] z-[4000] flex w-[100vw] flex-col items-center justify-center\">\r\n                    <div className=\"playingCards simpleCards flex flex-row items-center justify-center\">\r\n                      {players[1].cards.map(\r\n                        (\r\n                          card: { suit: string; rank: string; faceUp: any },\r\n                          index: any\r\n                        ) => (\r\n                          <Card\r\n                            key={`${index}-${card.suit}-${card.rank}`}\r\n                            suit={card.suit}\r\n                            rank={card.rank}\r\n                            faceUp={\r\n                              players[1].folded\r\n                                ? false\r\n                                : players[1].socket === playerSocket ||\r\n                                  card.faceUp\r\n                            }\r\n                            folded={players[1].folded}\r\n                            winner={\r\n                              winningCards.length > 0\r\n                                ? winningCards.filter((w) => {\r\n                                    return (\r\n                                      w.suit == card.suit.charAt(0) &&\r\n                                      w.value.toString().replace(\"T\", \"10\") ===\r\n                                        card.rank\r\n                                    );\r\n                                  }).length > 0\r\n                                : false\r\n                            }\r\n                          />\r\n                        )\r\n                      )}\r\n                    </div>\r\n                    <PlayerDisplay\r\n                      player={players[1]}\r\n                      active={\r\n                        activePlayer.name === players[1].name &&\r\n                        !gameOver &&\r\n                        !advancingToEnd\r\n                      }\r\n                      onTimeout={() => handlePlayerTimeout(players[1])}\r\n                      prevPlayer={players[0]}\r\n                      gameOver={gameOver}\r\n                    />\r\n                  </div>\r\n                  {dealer.name === players[1].name ? (\r\n                    <div className=\"absolute bottom-[30%] z-0 flex w-[100vw] flex-row pl-8\">\r\n                      <img\r\n                        src=\"images/black-dealer-button.png\"\r\n                        alt=\"dealer\"\r\n                        className=\"relative object-cover\"\r\n                      />\r\n                    </div>\r\n                  ) : littleBlind.name === players[1].name ? (\r\n                    <div className=\"absolute bottom-[30%] z-0 flex w-[100vw] flex-row pl-8\">\r\n                      <img\r\n                        src=\"images/littleblind.png\"\r\n                        alt=\"little blind\"\r\n                        width=\"50px\"\r\n                        height=\"50px\"\r\n                        className=\"relative object-cover\"\r\n                      />\r\n                    </div>\r\n                  ) : bigBlind.name === players[1].name ? (\r\n                    <div className=\"absolute bottom-[30%] z-0 flex w-[100vw] flex-row pl-8\">\r\n                      <img\r\n                        src=\"images/bigblind.png\"\r\n                        alt=\"big blind\"\r\n                        width=\"50px\"\r\n                        height=\"50px\"\r\n                        className=\"relative object-cover\"\r\n                      />\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n                <div className=\"flex flex-col gap-1\">\r\n                  {/* <div className=\"playingCards simpleCards fixed top-[30%] left-[35vw] flex w-[100vw] flex-row items-center justify-center\"></div> */}\r\n                  <div className=\"fixed bottom-[47vh] left-[35vw] z-[4000] flex w-[100vw] flex-col items-center justify-center\">\r\n                    <div className=\"playingCards simpleCards flex flex-row items-center justify-center\">\r\n                      {players[2].cards.map(\r\n                        (\r\n                          card: { suit: string; rank: string; faceUp: any },\r\n                          index: any\r\n                        ) => (\r\n                          <Card\r\n                            key={`${index}-${card.suit}-${card.rank}`}\r\n                            suit={card.suit}\r\n                            rank={card.rank}\r\n                            faceUp={\r\n                              players[2].folded\r\n                                ? false\r\n                                : players[2].socket === playerSocket ||\r\n                                  card.faceUp\r\n                            }\r\n                            folded={players[2].folded}\r\n                            winner={\r\n                              winningCards.length > 0\r\n                                ? winningCards.filter((w) => {\r\n                                    return (\r\n                                      w.suit == card.suit.charAt(0) &&\r\n                                      w.value.toString().replace(\"T\", \"10\") ===\r\n                                        card.rank\r\n                                    );\r\n                                  }).length > 0\r\n                                : false\r\n                            }\r\n                          />\r\n                        )\r\n                      )}\r\n                    </div>\r\n                    <PlayerDisplay\r\n                      player={players[2]}\r\n                      active={\r\n                        activePlayer.name === players[2].name &&\r\n                        !gameOver &&\r\n                        !advancingToEnd\r\n                      }\r\n                      onTimeout={() => handlePlayerTimeout(players[2])}\r\n                      prevPlayer={players[1]}\r\n                      gameOver={gameOver}\r\n                    />\r\n                  </div>\r\n                  {dealer.name === players[2].name ? (\r\n                    <div className=\"absolute bottom-[30%] z-0 flex w-[100vw] flex-row items-end justify-end pr-8\">\r\n                      <img\r\n                        src=\"images/black-dealer-button.png\"\r\n                        alt=\"dealer\"\r\n                        className=\"relative object-cover\"\r\n                      />\r\n                    </div>\r\n                  ) : littleBlind.name === players[2].name ? (\r\n                    <div className=\"absolute bottom-[30%] z-0 flex w-[100vw] flex-row items-end justify-end pr-8\">\r\n                      <img\r\n                        src=\"images/littleblind.png\"\r\n                        alt=\"little blind\"\r\n                        width=\"50px\"\r\n                        height=\"50px\"\r\n                        className=\"relative object-cover\"\r\n                      />\r\n                    </div>\r\n                  ) : bigBlind.name === players[2].name ? (\r\n                    <div className=\"absolute bottom-[30%] z-0 flex w-[100vw] flex-row items-end justify-end pr-8\">\r\n                      <img\r\n                        src=\"images/bigblind.png\"\r\n                        alt=\"big blind\"\r\n                        width=\"50px\"\r\n                        height=\"50px\"\r\n                        className=\"relative object-cover\"\r\n                      />\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n                <div className=\"playingCards simpleCards fixed bottom-[20%] flex w-[100vw] flex-row items-center justify-center\">\r\n                  {players[0].cards.map(\r\n                    (\r\n                      card: { suit: string; rank: string; faceUp: any },\r\n                      index: any\r\n                    ) => (\r\n                      <Card\r\n                        key={`${index}-${card.suit}-${card.rank}`}\r\n                        suit={card.suit}\r\n                        rank={card.rank}\r\n                        faceUp={\r\n                          players[0].folded\r\n                            ? false\r\n                            : players[0].socket === playerSocket || card.faceUp\r\n                        }\r\n                        folded={players[0].folded}\r\n                        winner={\r\n                          winningCards.length > 0\r\n                            ? winningCards.filter((w) => {\r\n                                return (\r\n                                  w.suit == card.suit.charAt(0) &&\r\n                                  w.value.toString().replace(\"T\", \"10\") ===\r\n                                    card.rank\r\n                                );\r\n                              }).length > 0\r\n                            : false\r\n                        }\r\n                      />\r\n                    )\r\n                  )}\r\n                </div>\r\n                <div className=\"fixed bottom-[7.5%] z-[4000] flex w-[100vw] flex-col items-center justify-center\">\r\n                  <PlayerDisplay\r\n                    player={players[0]}\r\n                    active={\r\n                      activePlayer.name === players[0].name &&\r\n                      !gameOver &&\r\n                      !advancingToEnd\r\n                    }\r\n                    onTimeout={() => handlePlayerTimeout(players[0])}\r\n                    prevPlayer={players[players.length - 1]}\r\n                    gameOver={gameOver}\r\n                  />\r\n                </div>\r\n                {dealer.name === players[0].name ? (\r\n                  <div className=\"absolute bottom-[1%] z-0 flex w-[100vw] flex-row items-center justify-center\">\r\n                    <img\r\n                      src=\"images/black-dealer-button.png\"\r\n                      alt=\"dealer\"\r\n                      className=\"relative object-cover\"\r\n                    />\r\n                  </div>\r\n                ) : littleBlind.name === players[0].name ? (\r\n                  <div className=\"absolute bottom-[1%] z-0 flex w-[100vw] flex-row items-center justify-center\">\r\n                    <img\r\n                      src=\"images/littleblind.png\"\r\n                      alt=\"little blind\"\r\n                      width=\"50px\"\r\n                      height=\"50px\"\r\n                      className=\"relative object-cover\"\r\n                    />\r\n                  </div>\r\n                ) : bigBlind.name === players[0].name ? (\r\n                  <div className=\"absolute bottom-[1%] z-0 flex w-[100vw] flex-row items-center justify-center\">\r\n                    <img\r\n                      src=\"images/bigblind.png\"\r\n                      alt=\"big blind\"\r\n                      width=\"50px\"\r\n                      height=\"50px\"\r\n                      className=\"relative object-cover\"\r\n                    />\r\n                  </div>\r\n                ) : null}\r\n                {!gameOver &&\r\n                !advancingToEnd &&\r\n                activePlayer.socket === playerSocket ? (\r\n                  <div className=\"fixed bottom-[10%] right-0 z-[987654321] flex w-[220px] flex-row items-end justify-end pr-8\">\r\n                    <div className=\"flex w-[100%] flex-row items-end\">\r\n                      <div className=\"m-2\">\r\n                        <input\r\n                          type=\"range\"\r\n                          className=\"form-range w-full p-0 focus:shadow-none focus:outline-none focus:ring-0\"\r\n                          min={\r\n                            activeBet > 0\r\n                              ? activeBet + bigBlindAmount\r\n                              : bigBlindAmount * 2\r\n                          }\r\n                          max={activePlayer.chips}\r\n                          value={bet}\r\n                          onChange={(event) => {\r\n                            setBet(+event.target.value);\r\n                          }}\r\n                        />\r\n                      </div>\r\n                      <div className=\"flex-1\" />\r\n                      <button className=\"rounded bg-transparent px-4 py-2 text-white\">\r\n                        {bet}\r\n                      </button>\r\n                    </div>\r\n                    <div className=\"fixed bottom-[5%] flex w-[100vw] flex-row items-end justify-end\">\r\n                      <button\r\n                        className=\"mr-1 rounded bg-black px-4 py-2 text-white active:bg-white active:text-black\"\r\n                        onClick={handleFold}\r\n                      >\r\n                        Fold\r\n                      </button>\r\n                      <button\r\n                        className=\"mr-1 rounded bg-black px-4 py-2 text-white active:bg-white active:text-black\"\r\n                        onClick={() =>\r\n                          handleCheckOrCall(\r\n                            activePlayer.chips >= activeBet\r\n                              ? activeBet\r\n                              : activePlayer.chips\r\n                          )\r\n                        }\r\n                      >\r\n                        {activeBet > 0\r\n                          ? `Call ${\r\n                              activePlayer.chips >= activeBet\r\n                                ? activeBet\r\n                                : activePlayer.chips\r\n                            }`\r\n                          : \"Check\"}\r\n                      </button>\r\n                      {activePlayer.chips > activeBet ? (\r\n                        <button\r\n                          className=\"rounded bg-black px-4 py-2 text-white active:bg-white active:text-black\"\r\n                          onClick={() => handleBet(bet)}\r\n                        >\r\n                          {activeBet > 0 ? `Raise to ${bet}` : `Bet ${bet}`}\r\n                        </button>\r\n                      ) : null}\r\n                    </div>\r\n                  </div>\r\n                ) : null}\r\n                {gameOver &&\r\n                earlyWin &&\r\n                winner &&\r\n                winner.winner.players\r\n                  .map((p) => p.socket)\r\n                  .includes(player!.socket) ? (\r\n                  <div className=\"fixed bottom-[10%] right-0 z-[10999] flex w-[220px] flex-row items-end justify-end pr-8\">\r\n                    <div className=\"fixed bottom-[5%] flex w-[100vw] flex-row items-end justify-end\">\r\n                      <button\r\n                        className=\"mr-1 rounded bg-black px-4 py-2 text-white active:bg-white active:text-black\"\r\n                        onClick={() => handleShowCards(player!)}\r\n                      >\r\n                        Show Cards\r\n                      </button>\r\n                      <button\r\n                        className=\"mr-1 rounded bg-black px-4 py-2 text-white active:bg-white active:text-black\"\r\n                        onClick={handleMuckCards}\r\n                      >\r\n                        Muck\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                ) : null}\r\n              </>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n", "import { useState } from \"react\";\r\n\r\ninterface CardProps {\r\n  rank: string;\r\n  suit: string;\r\n  faceUp: boolean;\r\n  folded: boolean;\r\n  winner?: boolean;\r\n}\r\n\r\nexport default function Card(props: CardProps) {\r\n  const { rank, suit, faceUp, folded, winner = false } = props;\r\n\r\n  const getUnicodeSuit = (inputSuit: any) => {\r\n    switch (inputSuit) {\r\n      case \"spades\":\r\n        return \"\\u2660\";\r\n      case \"hearts\":\r\n        return \"\\u2665\";\r\n      case \"diams\":\r\n        return \"\\u2666\";\r\n      case \"clubs\":\r\n        return \"\\u2663\";\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`relative p-0 ${\r\n        winner ? \"-mt-8 transition-all duration-1000\" : \"\"\r\n      }`}\r\n    >\r\n      <div\r\n        className={`card rank-${rank} ${suit} ${\r\n          winner ? \"winner border-4 border-lime-500\" : \"\"\r\n        }`}\r\n      >\r\n        {faceUp && (\r\n          <>\r\n            <span className=\"rank\">{rank}</span>\r\n            <span className=\"suit\">{getUnicodeSuit(suit)}</span>\r\n          </>\r\n        )}\r\n      </div>\r\n      {!faceUp && (\r\n        <div className=\"absolute top-0\">\r\n          <div className={`card back ${folded ? \"folded\" : \"\"}`} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n", "import { useEffect, useState } from \"react\";\r\nimport { Player } from \"~/routes\";\r\n\r\ninterface PlayerDisplayProps {\r\n  player: Player;\r\n  active: boolean;\r\n  onTimeout: () => void;\r\n  prevPlayer: Player;\r\n  gameOver: boolean;\r\n  wonAmount?: number;\r\n}\r\n\r\nexport default function PlayerDisplay(props: PlayerDisplayProps) {\r\n  const { player, active, onTimeout, prevPlayer, gameOver, wonAmount = 0 } = props;\r\n\r\n  const [progressCreated, setProgressCreated] = useState(false);\r\n\r\n  const createProgressbar = (id: string, duration: string, callback: any) => {\r\n    // We select the div that we want to turn into a progressbar\r\n    var progressbar = document.getElementById(id);\r\n    if (progressbar) {\r\n      progressbar!.className = \"progressbar\";\r\n\r\n      // We create the div that changes width to show progress\r\n      var progressbarinner = document.createElement(\"div\");\r\n      progressbarinner.className = \"inner\";\r\n\r\n      // Now we set the animation parameters\r\n      progressbarinner.style.animationDuration = duration;\r\n\r\n      // Eventually couple a callback\r\n      if (typeof callback === \"function\") {\r\n        progressbarinner.addEventListener(\"animationend\", callback);\r\n      }\r\n\r\n      // Append the progressbar to the main progressbardiv\r\n      progressbar?.appendChild(progressbarinner);\r\n\r\n      // When everything is set up we start the animation\r\n      progressbarinner.style.animationPlayState = \"running\";\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!gameOver) {\r\n      createProgressbar(\"progressbar\", \"60s\", function () {\r\n        onTimeout();\r\n      });\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className={`flex flex-col z-1`}>\r\n      <div\r\n        className={`w-[135px] max-w-[100vw] rounded-t-2xl bg-black/80 p-1 text-center text-white ${\r\n          active && !gameOver\r\n            ? \"border-x-4 border-t-4 border-x-lime-500 border-t-lime-500\"\r\n            : null\r\n        }`}\r\n      >\r\n        {`${player.name}`}\r\n      </div>\r\n      <div\r\n        className={`mb-1 w-[135px] max-w-[100vw] rounded-b-2xl bg-white/80 p-1 text-center text-black ${\r\n          active && !gameOver\r\n            ? \"border-x-4 border-b-4 border-x-lime-500 border-b-lime-500\"\r\n            : null\r\n        }`}\r\n      >\r\n        {player.allIn ? 'All In' : player.chips}\r\n      </div>\r\n      {active ? (\r\n        <div id=\"progressbar\"></div>\r\n      ) : (\r\n        <div className=\"m-[10px] h-[20px] w-full\"></div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n", "export default function Table() {\r\n  return (\r\n        <img\r\n          src=\"images/table.png\"\r\n          alt=\"table\"\r\n          className=\"absolute flex h-[80vh] w-[95vw] object-cover items-center justify-center self-center overflow-visible\"\r\n        />\r\n  );\r\n}\r\n", "import { useEffect, useState } from \"react\";\r\n\r\ninterface PotProps {\r\n  amount: number;\r\n}\r\n\r\nconst getChipsFromAmount = (amount: number) => {\r\n  let quotient,\r\n    remainder,\r\n    quotient1,\r\n    remainder1,\r\n    quotient2,\r\n    remainder2,\r\n    quotient3,\r\n    remainder3,\r\n    quotient4,\r\n    remainder4,\r\n    quotient5,\r\n    remainder5,\r\n    quotient6,\r\n    remainder6,\r\n    quotient7,\r\n    remainder7,\r\n    quotient8,\r\n    remainder8;\r\n\r\n  quotient = amount / 1000;\r\n  remainder = amount % 1000;\r\n\r\n  quotient1 = remainder / 500;\r\n  remainder1 = remainder % 500;\r\n\r\n  quotient2 = remainder1 / 100;\r\n  remainder2 = remainder1 % 100;\r\n\r\n  quotient3 = remainder2 / 50;\r\n  remainder3 = remainder2 % 50;\r\n\r\n  quotient4 = remainder3 / 20;\r\n  remainder4 = remainder3 % 20;\r\n\r\n  quotient5 = remainder4 / 10;\r\n  remainder5 = remainder4 % 10;\r\n\r\n  quotient6 = remainder5 / 5;\r\n  remainder6 = remainder5 % 5;\r\n\r\n  quotient7 = remainder6 / 2;\r\n  remainder7 = remainder6 % 2;\r\n\r\n  quotient8 = remainder7 / 1;\r\n  remainder8 = remainder7 % 1;\r\n\r\n  let totalChips = Math.floor(quotient) + Math.floor(quotient1) + Math.floor(quotient2) + Math.floor(quotient3) + Math.floor(quotient4) + Math.floor(quotient5) + Math.floor(quotient6) + Math.floor(quotient7) + Math.floor(quotient8);\r\n\r\n  return {\r\n    total: amount,\r\n    totalChips,\r\n    chips: {\r\n      \"1000\": Math.floor(quotient),\r\n      \"500\": Math.floor(quotient1),\r\n      \"100\": Math.floor(quotient2),\r\n      \"50\": Math.floor(quotient3),\r\n      \"20\": Math.floor(quotient4),\r\n      \"10\": Math.floor(quotient5),\r\n      \"5\": Math.floor(quotient6),\r\n      \"2\": Math.floor(quotient7),\r\n      \"1\": Math.floor(quotient8),\r\n    },\r\n  };\r\n};\r\n\r\nexport default function Pot(props: PotProps) {\r\n  const { amount } = props;\r\n  const [chips, setChips] = useState(getChipsFromAmount(amount || 0));\r\n\r\n  useEffect(() => {\r\n    if (amount > 0) {\r\n      setChips(getChipsFromAmount(amount));\r\n    }\r\n  }, [amount]);\r\n\r\n  return (\r\n    <div className=\"flex h-full w-full flex-row items-center justify-center\">\r\n      {chips.chips[\"1000\"] > 0\r\n        ? Array.from(Array(chips.chips[\"1000\"]).keys()).map((_, index) => {\r\n            return (\r\n              <img\r\n                key={1000 + index}\r\n                className={`relative ${index} -ml-10`}\r\n                width=\"36px\"\r\n                height=\"36px\"\r\n                src=\"images/chips/1000.png\"\r\n              />\r\n            );\r\n          })\r\n        : null}\r\n      {chips.chips[\"500\"] > 0\r\n        ? Array.from(Array(chips.chips[\"500\"]).keys()).map((_, index) => {\r\n            return (\r\n              <img\r\n                key={500 + index}\r\n                className={`relative ${index} -ml-10`}\r\n                width=\"36px\"\r\n                height=\"36px\"\r\n                src=\"images/chips/500.png\"\r\n              />\r\n            );\r\n          })\r\n        : null}\r\n      {chips.chips[\"100\"] > 0\r\n        ? Array.from(Array(chips.chips[\"100\"]).keys()).map((_, index) => {\r\n            return (\r\n              <img\r\n                key={100 + index}\r\n                className={`relative ${index} -ml-10`}\r\n                width=\"36px\"\r\n                height=\"36px\"\r\n                src=\"images/chips/100.png\"\r\n              />\r\n            );\r\n          })\r\n        : null}\r\n      {chips.chips[\"50\"] > 0\r\n        ? Array.from(Array(chips.chips[\"50\"]).keys()).map((_, index) => {\r\n            return (\r\n              <img\r\n                key={50 + index}\r\n                className={`relative ${index} -ml-10`}\r\n                width=\"36px\"\r\n                height=\"36px\"\r\n                src=\"images/chips/50.png\"\r\n              />\r\n            );\r\n          })\r\n        : null}\r\n      {chips.chips[\"20\"] > 0\r\n        ? Array.from(Array(chips.chips[\"20\"]).keys()).map((_, index) => {\r\n            return (\r\n              <img\r\n                key={20 + index}\r\n                className={`relative ${index} -ml-10`}\r\n                width=\"36px\"\r\n                height=\"36px\"\r\n                src=\"images/chips/20.png\"\r\n              />\r\n            );\r\n          })\r\n        : null}\r\n      {chips.chips[\"10\"] > 0\r\n        ? Array.from(Array(chips.chips[\"10\"]).keys()).map((_, index) => {\r\n            return (\r\n              <img\r\n                key={10 + index}\r\n                className={`relative ${index} -ml-10`}\r\n                width=\"36px\"\r\n                height=\"36px\"\r\n                src=\"images/chips/10.png\"\r\n              />\r\n            );\r\n          })\r\n        : null}\r\n      {chips.chips[\"5\"] > 0\r\n        ? Array.from(Array(chips.chips[\"5\"]).keys()).map((_, index) => {\r\n            return (\r\n              <img\r\n                key={5 + index}\r\n                className={`relative ${index} -ml-10`}\r\n                width=\"36px\"\r\n                height=\"36px\"\r\n                src=\"images/chips/5.png\"\r\n              />\r\n            );\r\n          })\r\n        : null}\r\n      {chips.chips[\"2\"] > 0\r\n        ? Array.from(Array(chips.chips[\"2\"]).keys()).map((_, index) => {\r\n            return (\r\n              <img\r\n                key={2 + index}\r\n                className={`relative ${index} -ml-10`}\r\n                width=\"36px\"\r\n                height=\"36px\"\r\n                src=\"images/chips/2.png\"\r\n              />\r\n            );\r\n          })\r\n        : null}\r\n      {chips.chips[\"1\"] > 0\r\n        ? Array.from(Array(chips.chips[\"1\"]).keys()).map((_, index) => {\r\n            return (\r\n              <img\r\n                key={1 + index}\r\n                className={`relative ${index} -ml-10`}\r\n                width=\"36px\"\r\n                height=\"36px\"\r\n                src=\"images/chips/1.png\"\r\n              />\r\n            );\r\n          })\r\n        : null}\r\n    </div>\r\n  );\r\n}\r\n", "import { useState } from \"react\";\r\nimport { GameState, initialPlayers, Player } from \"~/interfaces\";\r\nimport { PokerWinner } from \"~/utils/poker\";\r\n\r\nexport default function useGameState() {\r\n    const [gameState, setGameState] = useState(GameState.Preflop);\r\n    const [logs, setLogs] = useState<string[]>([]);\r\n  \r\n    const [gameStarted, setGameStarted] = useState(false);\r\n  \r\n    const [dealerCards, setDealerCards] = useState<any[]>([]);\r\n    const [isSnackbarOpen, setIsSnackbarOpen] = useState(false);\r\n    const [snackbarMessage, setSnackbarMessage] = useState(\"\");\r\n  \r\n    const [dealtCards, setDealtCards] = useState<any[]>([]);\r\n  \r\n    const [players, setPlayers] = useState<Player[]>(initialPlayers);\r\n    const [activePlayerIndex, setActivePlayerIndex] = useState(0);\r\n    const [activePlayer, setActivePlayer] = useState(\r\n      initialPlayers[activePlayerIndex]\r\n    );\r\n  \r\n    const [dealer, setDealer] = useState(initialPlayers[0]);\r\n    const [littleBlind, setLittleBlind] = useState(initialPlayers[1]);\r\n    const [bigBlind, setBigBlind] = useState(initialPlayers[2]);\r\n    const [littleBlindAmount, setLittleBlindAmount] = useState(10);\r\n    const [bigBlindAmount, setBigBlindAmount] = useState(20);\r\n    const [bet, setBet] = useState(bigBlindAmount * 2);\r\n    const [pots, setPots] = useState<any[]>([littleBlindAmount, bigBlindAmount]);\r\n    const [activeBet, setActiveBet] = useState(0);\r\n    const [turnNumber, setTurnNumber] = useState(0);\r\n    const [blinds, setBlinds] = useState([10, 20]);\r\n    const [winner, setWinner] = useState<{\r\n      winner: PokerWinner;\r\n      description: string;\r\n    } | null>(null);\r\n    const [gameOver, setGameOver] = useState(false);\r\n  \r\n    const [hands, setHands] = useState<any[]>([]);\r\n    const [activePlayerCount, setActivePlayerCount] = useState(3);\r\n    const [winningCards, setWinningCards] = useState<any[]>([]);\r\n    const [wonAmount, setWonAmount] = useState(0);\r\n    const [playerName, setPlayerName] = useState(\"\");\r\n    const [buttonClicked, setButtonClicked] = useState(false);\r\n    const [playerCount, setPlayerCount] = useState(0);\r\n    const [playerNames, setPlayerNames] = useState<any[]>([]);\r\n    const [playerSocket, setPlayerSocket] = useState<any>();\r\n    const [playerSockets, setPlayerSockets] = useState<any[]>([]);\r\n    const [player, setPlayer] = useState<Player>();\r\n    const [joinedGame, setJoinedGame] = useState(false);\r\n    const [turnsThisRound, setTurnsThisRound] = useState(2);\r\n    const [turnsNextRound, setTurnsNextRound] = useState(2);\r\n    const [earlyWin, setEarlyWin] = useState(false);\r\n    const [needResponsesFrom, setNeedResponsesFrom] = useState(3);\r\n    const [dealerIndex, setDealerIndex] = useState(0);\r\n    const [littleBlindIndex, setLittleBlindIndex] = useState(1);\r\n    const [bigBlindIndex, setBigBlindIndex] = useState(2);\r\n    const [manualAdvance, setManualAdvance] = useState(false);\r\n    const [ultimateWinner, setUltimateWinner] = useState<Player | null>(null);\r\n  \r\n    const [needResponsesFromIndicies, setNeedResponsesFromIndicies] = useState<\r\n      number[]\r\n    >([0, 1, 2]);\r\n  \r\n    const [advancingToEnd, setAdvancingToEnd] = useState(false);\r\n\r\n    return {\r\n        values: {\r\n            gameState,\r\n            logs,\r\n            gameStarted,\r\n            dealerCards,\r\n            isSnackbarOpen,\r\n            snackbarMessage,\r\n            dealtCards,\r\n            players,\r\n            activePlayerIndex,\r\n            activePlayer,\r\n            dealer,\r\n            littleBlind,\r\n            bigBlind,\r\n            littleBlindAmount,\r\n            bigBlindAmount,\r\n            bet,\r\n            pots,\r\n            activeBet,\r\n            turnNumber,\r\n            blinds,\r\n            winner,\r\n            gameOver,\r\n            hands,\r\n            activePlayerCount,\r\n            winningCards,\r\n            wonAmount,\r\n            playerName,\r\n            buttonClicked,\r\n            playerCount,\r\n            playerNames,\r\n            playerSocket,\r\n            playerSockets,\r\n            player,\r\n            joinedGame,\r\n            turnsThisRound,\r\n            turnsNextRound,\r\n            earlyWin,\r\n            needResponsesFrom,\r\n            dealerIndex,\r\n            littleBlindIndex,\r\n            bigBlindIndex,\r\n            manualAdvance,\r\n            ultimateWinner,\r\n            needResponsesFromIndicies,\r\n            advancingToEnd,\r\n        },\r\n        actions: {\r\n            setGameState,\r\n            setLogs,\r\n            setGameStarted,\r\n            setDealerCards,\r\n            setIsSnackbarOpen,\r\n            setSnackbarMessage,\r\n            setDealtCards,\r\n            setPlayers,\r\n            setActivePlayerIndex,\r\n            setActivePlayer,\r\n            setDealer,\r\n            setLittleBlind,\r\n            setBigBlind,\r\n            setLittleBlindAmount,\r\n            setBigBlindAmount,\r\n            setBet,\r\n            setPots,\r\n            setActiveBet,\r\n            setTurnNumber,\r\n            setBlinds,\r\n            setWinner,\r\n            setGameOver,\r\n            setHands,\r\n            setActivePlayerCount,\r\n            setWinningCards,\r\n            setWonAmount,\r\n            setPlayerName,\r\n            setButtonClicked,\r\n            setPlayerCount,\r\n            setPlayerNames,\r\n            setPlayerSocket,\r\n            setPlayerSockets,\r\n            setPlayer,\r\n            setJoinedGame,\r\n            setTurnsThisRound,\r\n            setTurnsNextRound,\r\n            setEarlyWin,\r\n            setNeedResponsesFrom,\r\n            setDealerIndex,\r\n            setLittleBlindIndex,\r\n            setBigBlindIndex,\r\n            setManualAdvance,\r\n            setUltimateWinner,\r\n            setNeedResponsesFromIndicies,\r\n            setAdvancingToEnd,\r\n        }\r\n      };\r\n}", "import { CardProps } from \"~/utils/poker\";\r\n\r\nexport interface Player {\r\n    name: string;\r\n    cards: CardProps[];\r\n    chips: number;\r\n    folded: boolean;\r\n    finalCards?: any | any[];\r\n    socket?: string;\r\n    allIn?: boolean;\r\n    [key: string]: string | number | boolean | CardProps[] | (string | undefined);\r\n  }\r\n  \r\n  export interface SendCheckOrCallDataProps {\r\n    players: Player[];\r\n    pots: any[];\r\n    prevActivePlayerIndex: number;\r\n    activePlayerIndex: number;\r\n    activePlayer: Player;\r\n    turnNumber: number;\r\n    playerSocket: string;\r\n    gameState: number;\r\n    dealerCards: any[];\r\n    activeBet: number;\r\n    turnsThisRound: number;\r\n    hands: any[];\r\n    needResponsesFrom: number;\r\n    dealerIndex: number;\r\n    littleBlindIndex: number;\r\n    bigBlindIndex: number;\r\n    callAmount: number;\r\n    needResponsesFromIndicies: number[];\r\n    littleBlindAmount?: number;\r\n    bigBlindAmount?: number;\r\n  }\r\n  \r\n  export interface SendFoldDataProps {\r\n    players: Player[];\r\n    prevActivePlayerIndex: number;\r\n    activePlayerIndex: number;\r\n    activePlayer: Player;\r\n    turnNumber: number;\r\n    playerSocket: string;\r\n    gameState: number;\r\n    turnsNextRound: number;\r\n    turnsThisRound: number;\r\n    hands: any[];\r\n    pots: any[];\r\n    dealerCards: any[];\r\n    needResponsesFrom: number;\r\n    littleBlindIndex: number;\r\n    bigBlindIndex: number;\r\n    activeBet: number;\r\n    needResponsesFromIndicies: number[];\r\n    bigBlindAmount: number;\r\n    littleBlindAmount: number;\r\n  }\r\n  \r\n  export interface SendBetDataProps {\r\n    players: Player[];\r\n    pots: any[];\r\n    prevActivePlayerIndex: number;\r\n    activePlayerIndex: number;\r\n    activePlayer: Player;\r\n    turnNumber: number;\r\n    playerSocket: string;\r\n    gameState: number;\r\n    dealerCards: any[];\r\n    activeBet: number;\r\n    turnsNextRound: number;\r\n    turnsThisRound: number;\r\n    hands: any[];\r\n    needResponsesFrom: number;\r\n    needResponsesFromIndicies: number[];\r\n    bigBlindAmount: number;\r\n  }\r\n  \r\n  export const GameState = Object.freeze({\r\n    Preflop: 0,\r\n    Flop: 1,\r\n    Turn: 2,\r\n    River: 3,\r\n    Showdown: 4,\r\n  });\r\n  \r\n  export const initialPlayers: Player[] = [\r\n    {\r\n      name: \"riceflair\",\r\n      chips: 1000,\r\n      cards: [],\r\n      folded: false,\r\n      allIn: false,\r\n    },\r\n    {\r\n      name: \"misterbrother\",\r\n      chips: 1000,\r\n      cards: [],\r\n      folded: false,\r\n      allIn: false,\r\n    },\r\n    {\r\n      name: \"copsucker\",\r\n      chips: 1000,\r\n      cards: [],\r\n      folded: false,\r\n      allIn: false,\r\n    },\r\n  ];", "import { useMatches } from \"@remix-run/react\";\nimport { useMemo } from \"react\";\n\nimport type { User } from \"~/models/user.server\";\n\nconst DEFAULT_REDIRECT = \"/\";\n\n/**\n * This should be used any time the redirect path is user-provided\n * (Like the query string on our login/signup pages). This avoids\n * open-redirect vulnerabilities.\n * @param {string} to The redirect destination\n * @param {string} defaultRedirect The redirect to use if the to is unsafe.\n */\nexport function safeRedirect(\n  to: FormDataEntryValue | string | null | undefined,\n  defaultRedirect: string = DEFAULT_REDIRECT\n) {\n  if (!to || typeof to !== \"string\") {\n    return defaultRedirect;\n  }\n\n  if (!to.startsWith(\"/\") || to.startsWith(\"//\")) {\n    return defaultRedirect;\n  }\n\n  return to;\n}\n\n/**\n * This base hook is used in other hooks to quickly search for specific data\n * across all loader data using useMatches.\n * @param {string} id The route id\n * @returns {JSON|undefined} The router data or undefined if not found\n */\nexport function useMatchesData(\n  id: string\n): Record<string, unknown> | undefined {\n  const matchingRoutes = useMatches();\n  const route = useMemo(\n    () => matchingRoutes.find((route) => route.id === id),\n    [matchingRoutes, id]\n  );\n  return route?.data;\n}\n\nfunction isUser(user: any): user is User {\n  return user && typeof user === \"object\" && typeof user.email === \"string\";\n}\n\nexport function useOptionalUser(): User | undefined {\n  const data = useMatchesData(\"root\");\n  if (!data || !isUser(data.user)) {\n    return undefined;\n  }\n  return data.user;\n}\n\nexport function useUser(): User {\n  const maybeUser = useOptionalUser();\n  if (!maybeUser) {\n    throw new Error(\n      \"No user found in root loader, but user is required by useUser. If user is optional, try useOptionalUser instead.\"\n    );\n  }\n  return maybeUser;\n}\n\nexport function validateEmail(email: unknown): email is string {\n  return typeof email === \"string\" && email.length > 3 && email.includes(\"@\");\n}\n\nexport function pluralize(count: number, singular: string, plural: string): string {\n  return count === 1 ? singular : plural;\n}\n", "import { Player } from \"~/interfaces\";\r\n\r\nexport default function getNextActivePlayerDetails(needResponsesFromIndicies: any[], players: any[], activePlayer: Player) {\r\n\r\n    let tempPlayers = [...players];\r\n\r\n    let tempActivePlayer = tempPlayers.find(\r\n        (player) => player.name === activePlayer.name\r\n    );\r\n\r\n    let tempPrevActivePlayerIndex = tempPlayers.indexOf(tempActivePlayer!);\r\n\r\n    let tempNeedResponsesFromIndicies = [...needResponsesFromIndicies];\r\n\r\n    tempNeedResponsesFromIndicies.shift();\r\n\r\n    let tempActivePlayers: Player[] = [];\r\n    let tempActivePlayerIndicies: number[] = [];\r\n\r\n    tempPlayers.forEach((p, index) => {\r\n        if (!(p.folded || p.chips <= 0)) {\r\n            tempActivePlayers.push(p);\r\n            tempActivePlayerIndicies.push(index);\r\n        }\r\n    });\r\n\r\n    let newActivePlayer: Player = tempActivePlayers[0];\r\n    let tempAPI: number = tempActivePlayerIndicies[0];\r\n\r\n    if (tempActivePlayerIndicies.length > 0) {\r\n        if (tempActivePlayerIndicies.includes(tempPrevActivePlayerIndex + 1)) {\r\n            newActivePlayer = tempPlayers[tempPrevActivePlayerIndex + 1];\r\n            tempAPI = tempPrevActivePlayerIndex + 1;\r\n        } else if (\r\n            tempActivePlayerIndicies.includes(tempPrevActivePlayerIndex + 2)\r\n        ) {\r\n            newActivePlayer = tempPlayers[tempPrevActivePlayerIndex + 2];\r\n            tempAPI = tempPrevActivePlayerIndex + 2;\r\n        } else {\r\n            newActivePlayer = tempActivePlayers[0];\r\n            tempAPI = tempActivePlayerIndicies[0];\r\n        }\r\n    } else {\r\n        newActivePlayer = tempActivePlayer!;\r\n        tempAPI = tempPrevActivePlayerIndex;\r\n    }\r\n\r\n    return { newActivePlayer, newActivePlayerIndex: tempAPI };\r\n}", "import { Dispatch, SetStateAction } from \"react\";\r\nimport { Player, SendFoldDataProps } from \"~/interfaces\";\r\nimport { PokerWinner } from \"~/utils/poker\";\r\nimport getNextActivePlayerDetails from \"./common\";\r\n\r\nexport default function prepareForFold(values: { gameState: any; logs?: string[]; gameStarted?: boolean; dealerCards: any; isSnackbarOpen?: boolean; snackbarMessage?: string; dealtCards?: any[]; players: any; activePlayerIndex?: number; activePlayer: any; dealer?: Player; littleBlind?: Player; bigBlind?: Player; littleBlindAmount?: number; bigBlindAmount?: number; bet?: number; pots: any; activeBet: any; turnNumber: any; blinds?: number[]; winner?: { winner: PokerWinner; description: string; } | null; gameOver?: boolean; hands: any; activePlayerCount?: number; winningCards?: any[]; wonAmount?: number; playerName?: string; buttonClicked?: boolean; playerCount?: number; playerNames?: any[]; playerSocket: any; playerSockets?: any[]; player?: Player | undefined; joinedGame?: boolean; turnsThisRound?: number; turnsNextRound: any; earlyWin?: boolean; needResponsesFrom: any; littleBlindIndex: any; bigBlindIndex: any; manualAdvance?: boolean; ultimateWinner?: Player | null; needResponsesFromIndicies: any; advancingToEnd?: boolean; }) {\r\n\r\n    const { players, activePlayer, needResponsesFromIndicies, turnNumber,\r\n        playerSocket,\r\n        gameState, turnsNextRound, hands,\r\n        dealerCards,\r\n        needResponsesFrom,\r\n        littleBlindIndex,\r\n        bigBlindIndex,\r\n        pots,\r\n        activeBet, littleBlindAmount, bigBlindAmount } = values;\r\n\r\n    let tempPlayers = [...players];\r\n    let tempActivePlayer = tempPlayers.find(\r\n        (player) => player.name === activePlayer.name\r\n    );\r\n    let tempPrevActivePlayerIndex = tempPlayers.indexOf(tempActivePlayer!);\r\n    tempActivePlayer!.cards = tempActivePlayer!.cards.map((card: { faceUp: boolean; }) => {\r\n        card.faceUp = false;\r\n        return card;\r\n    });\r\n    tempActivePlayer!.folded = true;\r\n\r\n    let tempNeedResponsesFromIndicies = [...needResponsesFromIndicies];\r\n    tempNeedResponsesFromIndicies.shift();\r\n\r\n    let nextActivePlayerDetails = getNextActivePlayerDetails(needResponsesFromIndicies, players, activePlayer);\r\n\r\n    const foldProps: SendFoldDataProps = {\r\n        players: tempPlayers,\r\n        activePlayerIndex: nextActivePlayerDetails.newActivePlayerIndex,\r\n        activePlayer: nextActivePlayerDetails.newActivePlayer,\r\n        prevActivePlayerIndex: tempPrevActivePlayerIndex,\r\n        turnNumber,\r\n        playerSocket,\r\n        gameState,\r\n        turnsNextRound: turnsNextRound - 1,\r\n        turnsThisRound: turnsNextRound,\r\n        hands,\r\n        dealerCards,\r\n        needResponsesFrom,\r\n        littleBlindIndex,\r\n        bigBlindIndex,\r\n        pots,\r\n        activeBet,\r\n        needResponsesFromIndicies: tempNeedResponsesFromIndicies,\r\n        bigBlindAmount: bigBlindAmount!,\r\n        littleBlindAmount: littleBlindAmount!,\r\n    };\r\n\r\n    return foldProps;\r\n\r\n}", "import { Player, SendCheckOrCallDataProps } from \"~/interfaces\";\r\nimport { PokerWinner } from \"~/utils/poker\";\r\nimport getNextActivePlayerDetails from \"./common\";\r\n\r\nexport default function prepareForCheckCall(values: {\r\n  gameState: any;\r\n  logs?: string[];\r\n  gameStarted?: boolean;\r\n  dealerCards: any;\r\n  isSnackbarOpen?: boolean;\r\n  snackbarMessage?: string;\r\n  dealtCards?: any[];\r\n  players: any;\r\n  activePlayerIndex?: number;\r\n  activePlayer: any;\r\n  dealer?: Player;\r\n  littleBlind?: Player;\r\n  bigBlind?: Player;\r\n  littleBlindAmount?: number;\r\n  bigBlindAmount?: number;\r\n  bet?: number;\r\n  pots: any;\r\n  activeBet: any;\r\n  turnNumber: any;\r\n  blinds?: number[];\r\n  winner?: { winner: PokerWinner; description: string } | null;\r\n  gameOver?: boolean;\r\n  hands: any;\r\n  activePlayerCount?: number;\r\n  winningCards?: any[];\r\n  wonAmount?: number;\r\n  playerName?: string;\r\n  buttonClicked?: boolean;\r\n  playerCount?: number;\r\n  playerNames?: any[];\r\n  playerSocket: any;\r\n  playerSockets?: any[];\r\n  player?: Player | undefined;\r\n  joinedGame?: boolean;\r\n  turnsThisRound: any;\r\n  turnsNextRound?: number;\r\n  earlyWin?: boolean;\r\n  needResponsesFrom: any;\r\n  littleBlindIndex: any;\r\n  bigBlindIndex: any;\r\n  dealerIndex: any;\r\n  manualAdvance?: boolean;\r\n  ultimateWinner?: Player | null;\r\n  needResponsesFromIndicies: any;\r\n  advancingToEnd?: boolean;\r\n  callAmount?: any;\r\n}) {\r\n  const {\r\n    players,\r\n    activePlayer,\r\n    turnNumber,\r\n    playerSocket,\r\n    gameState,\r\n    dealerCards,\r\n    activeBet,\r\n    turnsThisRound,\r\n    hands,\r\n    needResponsesFrom,\r\n    dealerIndex,\r\n    littleBlindIndex,\r\n    bigBlindIndex,\r\n    callAmount,\r\n    pots,\r\n    needResponsesFromIndicies,\r\n    littleBlindAmount,\r\n    bigBlindAmount,\r\n  } = values;\r\n\r\n  let tempPlayers = [...players];\r\n  let tempActivePlayer = tempPlayers.find(\r\n    (tempP) => tempP.name === activePlayer.name\r\n  );\r\n  let tempPrevActivePlayerIndex = tempPlayers.indexOf(tempActivePlayer!);\r\n  tempActivePlayer!.chips -= callAmount;\r\n\r\n  if (tempActivePlayer!.chips <= 0) {\r\n    tempActivePlayer!.allIn = true;\r\n  }\r\n\r\n  let tempPots = [...pots];\r\n  tempPots[0] += callAmount;\r\n\r\n  let nextActivePlayerDetails = getNextActivePlayerDetails(\r\n    needResponsesFromIndicies,\r\n    players,\r\n    activePlayer\r\n  );\r\n\r\n  let tempNeedResponsesFromIndicies = [...needResponsesFromIndicies];\r\n  tempNeedResponsesFromIndicies.shift();\r\n\r\n  const checkOrCallProps: SendCheckOrCallDataProps = {\r\n    players: tempPlayers,\r\n    pots: tempPots,\r\n    prevActivePlayerIndex: tempPrevActivePlayerIndex,\r\n    activePlayerIndex: nextActivePlayerDetails.newActivePlayerIndex,\r\n    activePlayer: nextActivePlayerDetails.newActivePlayer,\r\n    turnNumber,\r\n    playerSocket,\r\n    gameState,\r\n    dealerCards,\r\n    activeBet,\r\n    turnsThisRound,\r\n    hands,\r\n    needResponsesFrom,\r\n    dealerIndex,\r\n    littleBlindIndex,\r\n    bigBlindIndex,\r\n    callAmount,\r\n    needResponsesFromIndicies: tempNeedResponsesFromIndicies,\r\n    littleBlindAmount,\r\n    bigBlindAmount,\r\n  };\r\n\r\n  return checkOrCallProps;\r\n}\r\n", "import { Player, SendBetDataProps } from \"~/interfaces\";\r\nimport { PokerWinner } from \"~/utils/poker\";\r\nimport getNextActivePlayerDetails from \"./common\";\r\n\r\nexport default function prepareForBet(values: { gameState: number; logs: string[]; gameStarted: boolean; dealerCards: any[]; isSnackbarOpen: boolean; snackbarMessage: string; dealtCards: any[]; players: Player[]; activePlayerIndex: number; activePlayer: Player; dealer: Player; littleBlind: Player; bigBlind: Player; littleBlindAmount: number; bigBlindAmount: number; bet: number; pots: any[]; activeBet: number; turnNumber: number; blinds: number[]; winner: { winner: PokerWinner; description: string; } | null; gameOver: boolean; hands: any[]; activePlayerCount: number; winningCards: any[]; wonAmount: number; playerName: string; buttonClicked: boolean; playerCount: number; playerNames: any[]; playerSocket: any; playerSockets: any[]; player: Player | undefined; joinedGame: boolean; turnsThisRound: number; turnsNextRound: number; earlyWin: boolean; needResponsesFrom: number; littleBlindIndex: number; bigBlindIndex: number; manualAdvance: boolean; ultimateWinner: Player | null; needResponsesFromIndicies: number[]; advancingToEnd: boolean; }, amount: number) {\r\n    \r\n    const { players, activePlayer, needResponsesFromIndicies, turnNumber,\r\n        playerSocket,\r\n        gameState, turnsNextRound, hands,\r\n        dealerCards,\r\n        needResponsesFrom,\r\n        littleBlindIndex,\r\n        bigBlindIndex,\r\n        bigBlindAmount,\r\n        pots,\r\n        activeBet, turnsThisRound } = values;\r\n    \r\n    let tempPlayers = [...players];\r\n    let tempActivePlayer = tempPlayers.find(\r\n      (player) => player.name === activePlayer.name\r\n    );\r\n    let tempPrevActivePlayerIndex = tempPlayers.indexOf(tempActivePlayer!);\r\n    tempActivePlayer!.chips -= amount;\r\n\r\n    if (tempActivePlayer!.chips <= 0) {\r\n      tempActivePlayer!.allIn = true;\r\n    }\r\n\r\n    let tempPots = [...pots];\r\n    tempPots[0] += amount;\r\n\r\n    let tempNeedResponsesFromIndicies = [...needResponsesFromIndicies];\r\n\r\n    tempNeedResponsesFromIndicies.shift();\r\n\r\n    let nextActivePlayerDetails = getNextActivePlayerDetails(needResponsesFromIndicies, players, activePlayer);\r\n\r\n    const betProps: SendBetDataProps = {\r\n      players: tempPlayers,\r\n      pots: tempPots,\r\n      prevActivePlayerIndex: tempPrevActivePlayerIndex,\r\n      activePlayerIndex: nextActivePlayerDetails.newActivePlayerIndex,\r\n      activePlayer: nextActivePlayerDetails.newActivePlayer,\r\n      turnNumber,\r\n      playerSocket,\r\n      gameState,\r\n      dealerCards,\r\n      activeBet: amount,\r\n      turnsNextRound,\r\n      turnsThisRound,\r\n      hands,\r\n      needResponsesFrom,\r\n      needResponsesFromIndicies: tempNeedResponsesFromIndicies,\r\n      bigBlindAmount,\r\n    };\r\n\r\n    return betProps;\r\n}", "import type { ActionArgs, LoaderArgs, MetaFunction } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, Link, useActionData, useSearchParams } from \"@remix-run/react\";\nimport * as React from \"react\";\n\nimport { createUserSession, getUserId } from \"~/session.server\";\nimport { verifyLogin } from \"~/models/user.server\";\nimport { safeRedirect, validateEmail } from \"~/utils\";\n\nexport async function loader({ request }: LoaderArgs) {\n  const userId = await getUserId(request);\n  if (userId) return redirect(\"/\");\n  return json({});\n}\n\nexport async function action({ request }: ActionArgs) {\n  const formData = await request.formData();\n  const email = formData.get(\"email\");\n  const password = formData.get(\"password\");\n  const redirectTo = safeRedirect(formData.get(\"redirectTo\"), \"/notes\");\n  const remember = formData.get(\"remember\");\n\n  if (!validateEmail(email)) {\n    return json(\n      { errors: { email: \"Email is invalid\", password: null } },\n      { status: 400 }\n    );\n  }\n\n  if (typeof password !== \"string\" || password.length === 0) {\n    return json(\n      { errors: { email: null, password: \"Password is required\" } },\n      { status: 400 }\n    );\n  }\n\n  if (password.length < 8) {\n    return json(\n      { errors: { email: null, password: \"Password is too short\" } },\n      { status: 400 }\n    );\n  }\n\n  const user = await verifyLogin(email, password);\n\n  if (!user) {\n    return json(\n      { errors: { email: \"Invalid email or password\", password: null } },\n      { status: 400 }\n    );\n  }\n\n  return createUserSession({\n    request,\n    userId: user.id,\n    remember: remember === \"on\" ? true : false,\n    redirectTo,\n  });\n}\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: \"Login\",\n  };\n};\n\nexport default function LoginPage() {\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get(\"redirectTo\") || \"/notes\";\n  const actionData = useActionData<typeof action>();\n  const emailRef = React.useRef<HTMLInputElement>(null);\n  const passwordRef = React.useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    if (actionData?.errors?.email) {\n      emailRef.current?.focus();\n    } else if (actionData?.errors?.password) {\n      passwordRef.current?.focus();\n    }\n  }, [actionData]);\n\n  return (\n    <div className=\"flex min-h-full flex-col justify-center\">\n      <div className=\"mx-auto w-full max-w-md px-8\">\n        <Form method=\"post\" className=\"space-y-6\">\n          <div>\n            <label\n              htmlFor=\"email\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Email address\n            </label>\n            <div className=\"mt-1\">\n              <input\n                ref={emailRef}\n                id=\"email\"\n                required\n                autoFocus={true}\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                aria-invalid={actionData?.errors?.email ? true : undefined}\n                aria-describedby=\"email-error\"\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n              />\n              {actionData?.errors?.email && (\n                <div className=\"pt-1 text-red-700\" id=\"email-error\">\n                  {actionData.errors.email}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"password\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Password\n            </label>\n            <div className=\"mt-1\">\n              <input\n                id=\"password\"\n                ref={passwordRef}\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"current-password\"\n                aria-invalid={actionData?.errors?.password ? true : undefined}\n                aria-describedby=\"password-error\"\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n              />\n              {actionData?.errors?.password && (\n                <div className=\"pt-1 text-red-700\" id=\"password-error\">\n                  {actionData.errors.password}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\n          <button\n            type=\"submit\"\n            className=\"w-full rounded bg-blue-500  py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n          >\n            Log in\n          </button>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <input\n                id=\"remember\"\n                name=\"remember\"\n                type=\"checkbox\"\n                className=\"h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n              />\n              <label\n                htmlFor=\"remember\"\n                className=\"ml-2 block text-sm text-gray-900\"\n              >\n                Remember me\n              </label>\n            </div>\n            <div className=\"text-center text-sm text-gray-500\">\n              Don't have an account?{\" \"}\n              <Link\n                className=\"text-blue-500 underline\"\n                to={{\n                  pathname: \"/join\",\n                  search: searchParams.toString(),\n                }}\n              >\n                Sign up\n              </Link>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n}\n", "import type { LoaderArgs } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, Link, NavLink, Outlet, useLoaderData } from \"@remix-run/react\";\n\nimport { requireUserId } from \"~/session.server\";\nimport { useUser } from \"~/utils\";\nimport { getNoteListItems } from \"~/models/note.server\";\n\nexport async function loader({ request }: LoaderArgs) {\n  const userId = await requireUserId(request);\n  const noteListItems = await getNoteListItems({ userId });\n  return json({ noteListItems });\n}\n\nexport default function NotesPage() {\n  const data = useLoaderData<typeof loader>();\n  const user = useUser();\n\n  return (\n    <div className=\"flex h-full min-h-screen flex-col\">\n      <header className=\"flex items-center justify-between bg-slate-800 p-4 text-white\">\n        <h1 className=\"text-3xl font-bold\">\n          <Link to=\".\">Notes</Link>\n        </h1>\n        <p>{user.email}</p>\n        <Form action=\"/logout\" method=\"post\">\n          <button\n            type=\"submit\"\n            className=\"rounded bg-slate-600 py-2 px-4 text-blue-100 hover:bg-blue-500 active:bg-blue-600\"\n          >\n            Logout\n          </button>\n        </Form>\n      </header>\n\n      <main className=\"flex h-full bg-white\">\n        <div className=\"h-full w-80 border-r bg-gray-50\">\n          <Link to=\"new\" className=\"block p-4 text-xl text-blue-500\">\n            + New Note\n          </Link>\n\n          <hr />\n\n          {data.noteListItems.length === 0 ? (\n            <p className=\"p-4\">No notes yet</p>\n          ) : (\n            <ol>\n              {data.noteListItems.map((note) => (\n                <li key={note.id}>\n                  <NavLink\n                    className={({ isActive }) =>\n                      `block border-b p-4 text-xl ${isActive ? \"bg-white\" : \"\"}`\n                    }\n                    to={note.id}\n                  >\n                    \uD83D\uDCDD {note.title}\n                  </NavLink>\n                </li>\n              ))}\n            </ol>\n          )}\n        </div>\n\n        <div className=\"flex-1 p-6\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n}\n", "import type { User, Note } from \"@prisma/client\";\n\nimport { prisma } from \"~/db.server\";\n\nexport type { Note } from \"@prisma/client\";\n\nexport function getNote({\n  id,\n  userId,\n}: Pick<Note, \"id\"> & {\n  userId: User[\"id\"];\n}) {\n  return prisma.note.findFirst({\n    select: { id: true, body: true, title: true },\n    where: { id, userId },\n  });\n}\n\nexport function getNoteListItems({ userId }: { userId: User[\"id\"] }) {\n  return prisma.note.findMany({\n    where: { userId },\n    select: { id: true, title: true },\n    orderBy: { updatedAt: \"desc\" },\n  });\n}\n\nexport function createNote({\n  body,\n  title,\n  userId,\n}: Pick<Note, \"body\" | \"title\"> & {\n  userId: User[\"id\"];\n}) {\n  return prisma.note.create({\n    data: {\n      title,\n      body,\n      user: {\n        connect: {\n          id: userId,\n        },\n      },\n    },\n  });\n}\n\nexport function deleteNote({\n  id,\n  userId,\n}: Pick<Note, \"id\"> & { userId: User[\"id\"] }) {\n  return prisma.note.deleteMany({\n    where: { id, userId },\n  });\n}\n", "import type { ActionArgs, LoaderArgs } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useCatch, useLoaderData } from \"@remix-run/react\";\nimport invariant from \"tiny-invariant\";\n\nimport { deleteNote } from \"~/models/note.server\";\nimport { getNote } from \"~/models/note.server\";\nimport { requireUserId } from \"~/session.server\";\n\nexport async function loader({ request, params }: LoaderArgs) {\n  const userId = await requireUserId(request);\n  invariant(params.noteId, \"noteId not found\");\n\n  const note = await getNote({ userId, id: params.noteId });\n  if (!note) {\n    throw new Response(\"Not Found\", { status: 404 });\n  }\n  return json({ note });\n}\n\nexport async function action({ request, params }: ActionArgs) {\n  const userId = await requireUserId(request);\n  invariant(params.noteId, \"noteId not found\");\n\n  await deleteNote({ userId, id: params.noteId });\n\n  return redirect(\"/notes\");\n}\n\nexport default function NoteDetailsPage() {\n  const data = useLoaderData<typeof loader>();\n\n  return (\n    <div>\n      <h3 className=\"text-2xl font-bold\">{data.note.title}</h3>\n      <p className=\"py-6\">{data.note.body}</p>\n      <hr className=\"my-4\" />\n      <Form method=\"post\">\n        <button\n          type=\"submit\"\n          className=\"rounded bg-blue-500  py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n        >\n          Delete\n        </button>\n      </Form>\n    </div>\n  );\n}\n\nexport function ErrorBoundary({ error }: { error: Error }) {\n  console.error(error);\n\n  return <div>An unexpected error occurred: {error.message}</div>;\n}\n\nexport function CatchBoundary() {\n  const caught = useCatch();\n\n  if (caught.status === 404) {\n    return <div>Note not found</div>;\n  }\n\n  throw new Error(`Unexpected caught response with status: ${caught.status}`);\n}\n", "import { Link } from \"@remix-run/react\";\n\nexport default function NoteIndexPage() {\n  return (\n    <p>\n      No note selected. Select a note on the left, or{\" \"}\n      <Link to=\"new\" className=\"text-blue-500 underline\">\n        create a new note.\n      </Link>\n    </p>\n  );\n}\n", "import type { ActionArgs } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useActionData } from \"@remix-run/react\";\nimport * as React from \"react\";\n\nimport { createNote } from \"~/models/note.server\";\nimport { requireUserId } from \"~/session.server\";\n\nexport async function action({ request }: ActionArgs) {\n  const userId = await requireUserId(request);\n\n  const formData = await request.formData();\n  const title = formData.get(\"title\");\n  const body = formData.get(\"body\");\n\n  if (typeof title !== \"string\" || title.length === 0) {\n    return json(\n      { errors: { title: \"Title is required\", body: null } },\n      { status: 400 }\n    );\n  }\n\n  if (typeof body !== \"string\" || body.length === 0) {\n    return json(\n      { errors: { title: null, body: \"Body is required\" } },\n      { status: 400 }\n    );\n  }\n\n  const note = await createNote({ title, body, userId });\n\n  return redirect(`/notes/${note.id}`);\n}\n\nexport default function NewNotePage() {\n  const actionData = useActionData<typeof action>();\n  const titleRef = React.useRef<HTMLInputElement>(null);\n  const bodyRef = React.useRef<HTMLTextAreaElement>(null);\n\n  React.useEffect(() => {\n    if (actionData?.errors?.title) {\n      titleRef.current?.focus();\n    } else if (actionData?.errors?.body) {\n      bodyRef.current?.focus();\n    }\n  }, [actionData]);\n\n  return (\n    <Form\n      method=\"post\"\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: 8,\n        width: \"100%\",\n      }}\n    >\n      <div>\n        <label className=\"flex w-full flex-col gap-1\">\n          <span>Title: </span>\n          <input\n            ref={titleRef}\n            name=\"title\"\n            className=\"flex-1 rounded-md border-2 border-blue-500 px-3 text-lg leading-loose\"\n            aria-invalid={actionData?.errors?.title ? true : undefined}\n            aria-errormessage={\n              actionData?.errors?.title ? \"title-error\" : undefined\n            }\n          />\n        </label>\n        {actionData?.errors?.title && (\n          <div className=\"pt-1 text-red-700\" id=\"title-error\">\n            {actionData.errors.title}\n          </div>\n        )}\n      </div>\n\n      <div>\n        <label className=\"flex w-full flex-col gap-1\">\n          <span>Body: </span>\n          <textarea\n            ref={bodyRef}\n            name=\"body\"\n            rows={8}\n            className=\"w-full flex-1 rounded-md border-2 border-blue-500 py-2 px-3 text-lg leading-6\"\n            aria-invalid={actionData?.errors?.body ? true : undefined}\n            aria-errormessage={\n              actionData?.errors?.body ? \"body-error\" : undefined\n            }\n          />\n        </label>\n        {actionData?.errors?.body && (\n          <div className=\"pt-1 text-red-700\" id=\"body-error\">\n            {actionData.errors.body}\n          </div>\n        )}\n      </div>\n\n      <div className=\"text-right\">\n        <button\n          type=\"submit\"\n          className=\"rounded bg-blue-500 py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n        >\n          Save\n        </button>\n      </div>\n    </Form>\n  );\n}\n", "import type { ActionArgs, LoaderArgs, MetaFunction } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, Link, useActionData, useSearchParams } from \"@remix-run/react\";\nimport * as React from \"react\";\n\nimport { getUserId, createUserSession } from \"~/session.server\";\n\nimport { createUser, getUserByEmail } from \"~/models/user.server\";\nimport { safeRedirect, validateEmail } from \"~/utils\";\n\nexport async function loader({ request }: LoaderArgs) {\n  const userId = await getUserId(request);\n  if (userId) return redirect(\"/\");\n  return json({});\n}\n\nexport async function action({ request }: ActionArgs) {\n  const formData = await request.formData();\n  const email = formData.get(\"email\");\n  const password = formData.get(\"password\");\n  const redirectTo = safeRedirect(formData.get(\"redirectTo\"), \"/\");\n\n  if (!validateEmail(email)) {\n    return json(\n      { errors: { email: \"Email is invalid\", password: null } },\n      { status: 400 }\n    );\n  }\n\n  if (typeof password !== \"string\" || password.length === 0) {\n    return json(\n      { errors: { email: null, password: \"Password is required\" } },\n      { status: 400 }\n    );\n  }\n\n  if (password.length < 8) {\n    return json(\n      { errors: { email: null, password: \"Password is too short\" } },\n      { status: 400 }\n    );\n  }\n\n  const existingUser = await getUserByEmail(email);\n  if (existingUser) {\n    return json(\n      {\n        errors: {\n          email: \"A user already exists with this email\",\n          password: null,\n        },\n      },\n      { status: 400 }\n    );\n  }\n\n  const user = await createUser(email, password);\n\n  return createUserSession({\n    request,\n    userId: user.id,\n    remember: false,\n    redirectTo,\n  });\n}\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: \"Sign Up\",\n  };\n};\n\nexport default function Join() {\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get(\"redirectTo\") ?? undefined;\n  const actionData = useActionData<typeof action>();\n  const emailRef = React.useRef<HTMLInputElement>(null);\n  const passwordRef = React.useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    if (actionData?.errors?.email) {\n      emailRef.current?.focus();\n    } else if (actionData?.errors?.password) {\n      passwordRef.current?.focus();\n    }\n  }, [actionData]);\n\n  return (\n    <div className=\"flex min-h-full flex-col justify-center\">\n      <div className=\"mx-auto w-full max-w-md px-8\">\n        <Form method=\"post\" className=\"space-y-6\">\n          <div>\n            <label\n              htmlFor=\"email\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Email address\n            </label>\n            <div className=\"mt-1\">\n              <input\n                ref={emailRef}\n                id=\"email\"\n                required\n                autoFocus={true}\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                aria-invalid={actionData?.errors?.email ? true : undefined}\n                aria-describedby=\"email-error\"\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n              />\n              {actionData?.errors?.email && (\n                <div className=\"pt-1 text-red-700\" id=\"email-error\">\n                  {actionData.errors.email}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"password\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Password\n            </label>\n            <div className=\"mt-1\">\n              <input\n                id=\"password\"\n                ref={passwordRef}\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"new-password\"\n                aria-invalid={actionData?.errors?.password ? true : undefined}\n                aria-describedby=\"password-error\"\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n              />\n              {actionData?.errors?.password && (\n                <div className=\"pt-1 text-red-700\" id=\"password-error\">\n                  {actionData.errors.password}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\n          <button\n            type=\"submit\"\n            className=\"w-full rounded bg-blue-500  py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n          >\n            Create Account\n          </button>\n          <div className=\"flex items-center justify-center\">\n            <div className=\"text-center text-sm text-gray-500\">\n              Already have an account?{\" \"}\n              <Link\n                className=\"text-blue-500 underline\"\n                to={{\n                  pathname: \"/login\",\n                  search: searchParams.toString(),\n                }}\n              >\n                Log in\n              </Link>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n}\n", "export default {'version':'b206863e','entry':{'module':'/build/entry.client-R3MZUUHS.js','imports':['/build/_shared/chunk-LI4H3HRL.js','/build/_shared/chunk-AWG3O6NZ.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-QPS2LLRV.js','imports':['/build/_shared/chunk-Y6XVBMDT.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/healthcheck':{'id':'routes/healthcheck','parentId':'root','path':'healthcheck','index':undefined,'caseSensitive':undefined,'module':'/build/routes/healthcheck-D2FTVWR5.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-77XP74BF.js','imports':['/build/_shared/chunk-SXLZWW2B.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/join':{'id':'routes/join','parentId':'root','path':'join','index':undefined,'caseSensitive':undefined,'module':'/build/routes/join-XUBLHJTH.js','imports':['/build/_shared/chunk-5FXPDKBM.js','/build/_shared/chunk-SXLZWW2B.js','/build/_shared/chunk-2FM4UGS6.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/login':{'id':'routes/login','parentId':'root','path':'login','index':undefined,'caseSensitive':undefined,'module':'/build/routes/login-FEEKEKAC.js','imports':['/build/_shared/chunk-5FXPDKBM.js','/build/_shared/chunk-SXLZWW2B.js','/build/_shared/chunk-2FM4UGS6.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/logout':{'id':'routes/logout','parentId':'root','path':'logout','index':undefined,'caseSensitive':undefined,'module':'/build/routes/logout-VH5G5TMR.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/notes':{'id':'routes/notes','parentId':'root','path':'notes','index':undefined,'caseSensitive':undefined,'module':'/build/routes/notes-6XS3BOES.js','imports':['/build/_shared/chunk-SXLZWW2B.js','/build/_shared/chunk-F4EOO5R2.js','/build/_shared/chunk-2FM4UGS6.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/notes/$noteId':{'id':'routes/notes/$noteId','parentId':'routes/notes','path':':noteId','index':undefined,'caseSensitive':undefined,'module':'/build/routes/notes/$noteId-MDG7BMYH.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':true,'hasErrorBoundary':true},'routes/notes/index':{'id':'routes/notes/index','parentId':'routes/notes','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/notes/index-BGM45BK3.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/notes/new':{'id':'routes/notes/new','parentId':'routes/notes','path':'new','index':undefined,'caseSensitive':undefined,'module':'/build/routes/notes/new-T2YVMLZP.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-B206863E.js'};", "\nimport * as entryServer from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\entry.server.tsx\";\nimport * as route0 from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\root.tsx\";\nimport * as route1 from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\routes\\\\healthcheck.tsx\";\nimport * as route2 from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\routes\\\\logout.tsx\";\nimport * as route3 from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\routes\\\\index.tsx\";\nimport * as route4 from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\routes\\\\login.tsx\";\nimport * as route5 from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\routes\\\\notes.tsx\";\nimport * as route6 from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\routes\\\\notes\\\\$noteId.tsx\";\nimport * as route7 from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\routes\\\\notes\\\\index.tsx\";\nimport * as route8 from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\routes\\\\notes\\\\new.tsx\";\nimport * as route9 from \"C:\\\\Users\\\\jreis\\\\Desktop\\\\Sites\\\\poker-world\\\\app\\\\routes\\\\join.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public\\\\build\";\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/healthcheck\": {\n      id: \"routes/healthcheck\",\n      parentId: \"root\",\n      path: \"healthcheck\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/logout\": {\n      id: \"routes/logout\",\n      parentId: \"root\",\n      path: \"logout\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/login\": {\n      id: \"routes/login\",\n      parentId: \"root\",\n      path: \"login\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/notes\": {\n      id: \"routes/notes\",\n      parentId: \"root\",\n      path: \"notes\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/notes/$noteId\": {\n      id: \"routes/notes/$noteId\",\n      parentId: \"routes/notes\",\n      path: \":noteId\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/notes/index\": {\n      id: \"routes/notes/index\",\n      parentId: \"routes/notes\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route7\n    },\n  \"routes/notes/new\": {\n      id: \"routes/notes/new\",\n      parentId: \"routes/notes\",\n      path: \"new\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route8\n    },\n  \"routes/join\": {\n      id: \"routes/join\",\n      parentId: \"root\",\n      path: \"join\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route9\n    }\n  };"],
  "mappings": "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",
  "names": []
}
